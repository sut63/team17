// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/course"
	"github.com/sut63/team17/app/ent/faculty"
	"github.com/sut63/team17/app/ent/professor"
)

// FacultyCreate is the builder for creating a Faculty entity.
type FacultyCreate struct {
	config
	mutation *FacultyMutation
	hooks    []Hook
}

// SetFaculty sets the faculty field.
func (fc *FacultyCreate) SetFaculty(s string) *FacultyCreate {
	fc.mutation.SetFaculty(s)
	return fc
}

// AddFacuCourIDs adds the facu_cour edge to Course by ids.
func (fc *FacultyCreate) AddFacuCourIDs(ids ...int) *FacultyCreate {
	fc.mutation.AddFacuCourIDs(ids...)
	return fc
}

// AddFacuCour adds the facu_cour edges to Course.
func (fc *FacultyCreate) AddFacuCour(c ...*Course) *FacultyCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return fc.AddFacuCourIDs(ids...)
}

// AddFacuProfIDs adds the facu_prof edge to Professor by ids.
func (fc *FacultyCreate) AddFacuProfIDs(ids ...int) *FacultyCreate {
	fc.mutation.AddFacuProfIDs(ids...)
	return fc
}

// AddFacuProf adds the facu_prof edges to Professor.
func (fc *FacultyCreate) AddFacuProf(p ...*Professor) *FacultyCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return fc.AddFacuProfIDs(ids...)
}

// Mutation returns the FacultyMutation object of the builder.
func (fc *FacultyCreate) Mutation() *FacultyMutation {
	return fc.mutation
}

// Save creates the Faculty in the database.
func (fc *FacultyCreate) Save(ctx context.Context) (*Faculty, error) {
	if _, ok := fc.mutation.Faculty(); !ok {
		return nil, &ValidationError{Name: "faculty", err: errors.New("ent: missing required field \"faculty\"")}
	}
	if v, ok := fc.mutation.Faculty(); ok {
		if err := faculty.FacultyValidator(v); err != nil {
			return nil, &ValidationError{Name: "faculty", err: fmt.Errorf("ent: validator failed for field \"faculty\": %w", err)}
		}
	}
	var (
		err  error
		node *Faculty
	)
	if len(fc.hooks) == 0 {
		node, err = fc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*FacultyMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			fc.mutation = mutation
			node, err = fc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(fc.hooks) - 1; i >= 0; i-- {
			mut = fc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, fc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FacultyCreate) SaveX(ctx context.Context) *Faculty {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (fc *FacultyCreate) sqlSave(ctx context.Context) (*Faculty, error) {
	f, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	f.ID = int(id)
	return f, nil
}

func (fc *FacultyCreate) createSpec() (*Faculty, *sqlgraph.CreateSpec) {
	var (
		f     = &Faculty{config: fc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: faculty.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: faculty.FieldID,
			},
		}
	)
	if value, ok := fc.mutation.Faculty(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: faculty.FieldFaculty,
		})
		f.Faculty = value
	}
	if nodes := fc.mutation.FacuCourIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   faculty.FacuCourTable,
			Columns: []string{faculty.FacuCourColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := fc.mutation.FacuProfIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   faculty.FacuProfTable,
			Columns: []string{faculty.FacuProfColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: professor.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return f, _spec
}
