// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team17/app/ent/results"
	"github.com/sut63/team17/app/ent/student"
	"github.com/sut63/team17/app/ent/subject"
	"github.com/sut63/team17/app/ent/term"
	"github.com/sut63/team17/app/ent/year"
)

// Results is the model entity for the Results schema.
type Results struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Grade holds the value of the "grade" field.
	Grade float64 `json:"grade,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResultsQuery when eager-loading is set.
	Edges             ResultsEdges `json:"edges"`
	student_stud_resu *int
	subject_subj_resu *int
	term_term_resu    *int
	year_year_resu    *int
}

// ResultsEdges holds the relations/edges for other nodes in the graph.
type ResultsEdges struct {
	// ResuYear holds the value of the resu_year edge.
	ResuYear *Year
	// ResuSubj holds the value of the resu_subj edge.
	ResuSubj *Subject
	// ResuStud holds the value of the resu_stud edge.
	ResuStud *Student
	// ResuTerm holds the value of the resu_term edge.
	ResuTerm *Term
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// ResuYearOrErr returns the ResuYear value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResultsEdges) ResuYearOrErr() (*Year, error) {
	if e.loadedTypes[0] {
		if e.ResuYear == nil {
			// The edge resu_year was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: year.Label}
		}
		return e.ResuYear, nil
	}
	return nil, &NotLoadedError{edge: "resu_year"}
}

// ResuSubjOrErr returns the ResuSubj value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResultsEdges) ResuSubjOrErr() (*Subject, error) {
	if e.loadedTypes[1] {
		if e.ResuSubj == nil {
			// The edge resu_subj was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subject.Label}
		}
		return e.ResuSubj, nil
	}
	return nil, &NotLoadedError{edge: "resu_subj"}
}

// ResuStudOrErr returns the ResuStud value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResultsEdges) ResuStudOrErr() (*Student, error) {
	if e.loadedTypes[2] {
		if e.ResuStud == nil {
			// The edge resu_stud was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: student.Label}
		}
		return e.ResuStud, nil
	}
	return nil, &NotLoadedError{edge: "resu_stud"}
}

// ResuTermOrErr returns the ResuTerm value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResultsEdges) ResuTermOrErr() (*Term, error) {
	if e.loadedTypes[3] {
		if e.ResuTerm == nil {
			// The edge resu_term was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: term.Label}
		}
		return e.ResuTerm, nil
	}
	return nil, &NotLoadedError{edge: "resu_term"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Results) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},   // id
		&sql.NullFloat64{}, // grade
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Results) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // student_stud_resu
		&sql.NullInt64{}, // subject_subj_resu
		&sql.NullInt64{}, // term_term_resu
		&sql.NullInt64{}, // year_year_resu
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Results fields.
func (r *Results) assignValues(values ...interface{}) error {
	if m, n := len(values), len(results.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullFloat64); !ok {
		return fmt.Errorf("unexpected type %T for field grade", values[0])
	} else if value.Valid {
		r.Grade = value.Float64
	}
	values = values[1:]
	if len(values) == len(results.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field student_stud_resu", value)
		} else if value.Valid {
			r.student_stud_resu = new(int)
			*r.student_stud_resu = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field subject_subj_resu", value)
		} else if value.Valid {
			r.subject_subj_resu = new(int)
			*r.subject_subj_resu = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field term_term_resu", value)
		} else if value.Valid {
			r.term_term_resu = new(int)
			*r.term_term_resu = int(value.Int64)
		}
		if value, ok := values[3].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field year_year_resu", value)
		} else if value.Valid {
			r.year_year_resu = new(int)
			*r.year_year_resu = int(value.Int64)
		}
	}
	return nil
}

// QueryResuYear queries the resu_year edge of the Results.
func (r *Results) QueryResuYear() *YearQuery {
	return (&ResultsClient{config: r.config}).QueryResuYear(r)
}

// QueryResuSubj queries the resu_subj edge of the Results.
func (r *Results) QueryResuSubj() *SubjectQuery {
	return (&ResultsClient{config: r.config}).QueryResuSubj(r)
}

// QueryResuStud queries the resu_stud edge of the Results.
func (r *Results) QueryResuStud() *StudentQuery {
	return (&ResultsClient{config: r.config}).QueryResuStud(r)
}

// QueryResuTerm queries the resu_term edge of the Results.
func (r *Results) QueryResuTerm() *TermQuery {
	return (&ResultsClient{config: r.config}).QueryResuTerm(r)
}

// Update returns a builder for updating this Results.
// Note that, you need to call Results.Unwrap() before calling this method, if this Results
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Results) Update() *ResultsUpdateOne {
	return (&ResultsClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Results) Unwrap() *Results {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Results is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Results) String() string {
	var builder strings.Builder
	builder.WriteString("Results(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", grade=")
	builder.WriteString(fmt.Sprintf("%v", r.Grade))
	builder.WriteByte(')')
	return builder.String()
}

// ResultsSlice is a parsable slice of Results.
type ResultsSlice []*Results

func (r ResultsSlice) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
