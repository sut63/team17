// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/course"
	"github.com/sut63/team17/app/ent/institution"
)

// InstitutionCreate is the builder for creating a Institution entity.
type InstitutionCreate struct {
	config
	mutation *InstitutionMutation
	hooks    []Hook
}

// SetInstitution sets the institution field.
func (ic *InstitutionCreate) SetInstitution(s string) *InstitutionCreate {
	ic.mutation.SetInstitution(s)
	return ic
}

// AddInstCourIDs adds the inst_cour edge to Course by ids.
func (ic *InstitutionCreate) AddInstCourIDs(ids ...int) *InstitutionCreate {
	ic.mutation.AddInstCourIDs(ids...)
	return ic
}

// AddInstCour adds the inst_cour edges to Course.
func (ic *InstitutionCreate) AddInstCour(c ...*Course) *InstitutionCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return ic.AddInstCourIDs(ids...)
}

// Mutation returns the InstitutionMutation object of the builder.
func (ic *InstitutionCreate) Mutation() *InstitutionMutation {
	return ic.mutation
}

// Save creates the Institution in the database.
func (ic *InstitutionCreate) Save(ctx context.Context) (*Institution, error) {
	if _, ok := ic.mutation.Institution(); !ok {
		return nil, &ValidationError{Name: "institution", err: errors.New("ent: missing required field \"institution\"")}
	}
	if v, ok := ic.mutation.Institution(); ok {
		if err := institution.InstitutionValidator(v); err != nil {
			return nil, &ValidationError{Name: "institution", err: fmt.Errorf("ent: validator failed for field \"institution\": %w", err)}
		}
	}
	var (
		err  error
		node *Institution
	)
	if len(ic.hooks) == 0 {
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*InstitutionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *InstitutionCreate) SaveX(ctx context.Context) *Institution {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ic *InstitutionCreate) sqlSave(ctx context.Context) (*Institution, error) {
	i, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	i.ID = int(id)
	return i, nil
}

func (ic *InstitutionCreate) createSpec() (*Institution, *sqlgraph.CreateSpec) {
	var (
		i     = &Institution{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: institution.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: institution.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.Institution(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: institution.FieldInstitution,
		})
		i.Institution = value
	}
	if nodes := ic.mutation.InstCourIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   institution.InstCourTable,
			Columns: []string{institution.InstCourColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return i, _spec
}
