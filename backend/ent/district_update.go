// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/district"
	"github.com/sut63/team17/app/ent/postal"
	"github.com/sut63/team17/app/ent/predicate"
	"github.com/sut63/team17/app/ent/province"
	"github.com/sut63/team17/app/ent/subdistrict"
)

// DistrictUpdate is the builder for updating District entities.
type DistrictUpdate struct {
	config
	hooks      []Hook
	mutation   *DistrictMutation
	predicates []predicate.District
}

// Where adds a new predicate for the builder.
func (du *DistrictUpdate) Where(ps ...predicate.District) *DistrictUpdate {
	du.predicates = append(du.predicates, ps...)
	return du
}

// SetDistrict sets the district field.
func (du *DistrictUpdate) SetDistrict(s string) *DistrictUpdate {
	du.mutation.SetDistrict(s)
	return du
}

// SetDistSubdID sets the dist_subd edge to Subdistrict by id.
func (du *DistrictUpdate) SetDistSubdID(id int) *DistrictUpdate {
	du.mutation.SetDistSubdID(id)
	return du
}

// SetNillableDistSubdID sets the dist_subd edge to Subdistrict by id if the given value is not nil.
func (du *DistrictUpdate) SetNillableDistSubdID(id *int) *DistrictUpdate {
	if id != nil {
		du = du.SetDistSubdID(*id)
	}
	return du
}

// SetDistSubd sets the dist_subd edge to Subdistrict.
func (du *DistrictUpdate) SetDistSubd(s *Subdistrict) *DistrictUpdate {
	return du.SetDistSubdID(s.ID)
}

// SetDistPostID sets the dist_post edge to Postal by id.
func (du *DistrictUpdate) SetDistPostID(id int) *DistrictUpdate {
	du.mutation.SetDistPostID(id)
	return du
}

// SetNillableDistPostID sets the dist_post edge to Postal by id if the given value is not nil.
func (du *DistrictUpdate) SetNillableDistPostID(id *int) *DistrictUpdate {
	if id != nil {
		du = du.SetDistPostID(*id)
	}
	return du
}

// SetDistPost sets the dist_post edge to Postal.
func (du *DistrictUpdate) SetDistPost(p *Postal) *DistrictUpdate {
	return du.SetDistPostID(p.ID)
}

// AddDistProvIDs adds the dist_prov edge to Province by ids.
func (du *DistrictUpdate) AddDistProvIDs(ids ...int) *DistrictUpdate {
	du.mutation.AddDistProvIDs(ids...)
	return du
}

// AddDistProv adds the dist_prov edges to Province.
func (du *DistrictUpdate) AddDistProv(p ...*Province) *DistrictUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.AddDistProvIDs(ids...)
}

// Mutation returns the DistrictMutation object of the builder.
func (du *DistrictUpdate) Mutation() *DistrictMutation {
	return du.mutation
}

// ClearDistSubd clears the dist_subd edge to Subdistrict.
func (du *DistrictUpdate) ClearDistSubd() *DistrictUpdate {
	du.mutation.ClearDistSubd()
	return du
}

// ClearDistPost clears the dist_post edge to Postal.
func (du *DistrictUpdate) ClearDistPost() *DistrictUpdate {
	du.mutation.ClearDistPost()
	return du
}

// RemoveDistProvIDs removes the dist_prov edge to Province by ids.
func (du *DistrictUpdate) RemoveDistProvIDs(ids ...int) *DistrictUpdate {
	du.mutation.RemoveDistProvIDs(ids...)
	return du
}

// RemoveDistProv removes dist_prov edges to Province.
func (du *DistrictUpdate) RemoveDistProv(p ...*Province) *DistrictUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return du.RemoveDistProvIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (du *DistrictUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := du.mutation.District(); ok {
		if err := district.DistrictValidator(v); err != nil {
			return 0, &ValidationError{Name: "district", err: fmt.Errorf("ent: validator failed for field \"district\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(du.hooks) == 0 {
		affected, err = du.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DistrictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			du.mutation = mutation
			affected, err = du.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(du.hooks) - 1; i >= 0; i-- {
			mut = du.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, du.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (du *DistrictUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DistrictUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DistrictUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DistrictUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   district.Table,
			Columns: district.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: district.FieldID,
			},
		},
	}
	if ps := du.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.District(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: district.FieldDistrict,
		})
	}
	if du.mutation.DistSubdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.DistSubdTable,
			Columns: []string{district.DistSubdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subdistrict.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DistSubdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.DistSubdTable,
			Columns: []string{district.DistSubdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subdistrict.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.DistPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.DistPostTable,
			Columns: []string{district.DistPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: postal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DistPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.DistPostTable,
			Columns: []string{district.DistPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: postal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := du.mutation.RemovedDistProvIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.DistProvTable,
			Columns: []string{district.DistProvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.DistProvIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.DistProvTable,
			Columns: []string{district.DistProvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{district.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// DistrictUpdateOne is the builder for updating a single District entity.
type DistrictUpdateOne struct {
	config
	hooks    []Hook
	mutation *DistrictMutation
}

// SetDistrict sets the district field.
func (duo *DistrictUpdateOne) SetDistrict(s string) *DistrictUpdateOne {
	duo.mutation.SetDistrict(s)
	return duo
}

// SetDistSubdID sets the dist_subd edge to Subdistrict by id.
func (duo *DistrictUpdateOne) SetDistSubdID(id int) *DistrictUpdateOne {
	duo.mutation.SetDistSubdID(id)
	return duo
}

// SetNillableDistSubdID sets the dist_subd edge to Subdistrict by id if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableDistSubdID(id *int) *DistrictUpdateOne {
	if id != nil {
		duo = duo.SetDistSubdID(*id)
	}
	return duo
}

// SetDistSubd sets the dist_subd edge to Subdistrict.
func (duo *DistrictUpdateOne) SetDistSubd(s *Subdistrict) *DistrictUpdateOne {
	return duo.SetDistSubdID(s.ID)
}

// SetDistPostID sets the dist_post edge to Postal by id.
func (duo *DistrictUpdateOne) SetDistPostID(id int) *DistrictUpdateOne {
	duo.mutation.SetDistPostID(id)
	return duo
}

// SetNillableDistPostID sets the dist_post edge to Postal by id if the given value is not nil.
func (duo *DistrictUpdateOne) SetNillableDistPostID(id *int) *DistrictUpdateOne {
	if id != nil {
		duo = duo.SetDistPostID(*id)
	}
	return duo
}

// SetDistPost sets the dist_post edge to Postal.
func (duo *DistrictUpdateOne) SetDistPost(p *Postal) *DistrictUpdateOne {
	return duo.SetDistPostID(p.ID)
}

// AddDistProvIDs adds the dist_prov edge to Province by ids.
func (duo *DistrictUpdateOne) AddDistProvIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.AddDistProvIDs(ids...)
	return duo
}

// AddDistProv adds the dist_prov edges to Province.
func (duo *DistrictUpdateOne) AddDistProv(p ...*Province) *DistrictUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.AddDistProvIDs(ids...)
}

// Mutation returns the DistrictMutation object of the builder.
func (duo *DistrictUpdateOne) Mutation() *DistrictMutation {
	return duo.mutation
}

// ClearDistSubd clears the dist_subd edge to Subdistrict.
func (duo *DistrictUpdateOne) ClearDistSubd() *DistrictUpdateOne {
	duo.mutation.ClearDistSubd()
	return duo
}

// ClearDistPost clears the dist_post edge to Postal.
func (duo *DistrictUpdateOne) ClearDistPost() *DistrictUpdateOne {
	duo.mutation.ClearDistPost()
	return duo
}

// RemoveDistProvIDs removes the dist_prov edge to Province by ids.
func (duo *DistrictUpdateOne) RemoveDistProvIDs(ids ...int) *DistrictUpdateOne {
	duo.mutation.RemoveDistProvIDs(ids...)
	return duo
}

// RemoveDistProv removes dist_prov edges to Province.
func (duo *DistrictUpdateOne) RemoveDistProv(p ...*Province) *DistrictUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return duo.RemoveDistProvIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (duo *DistrictUpdateOne) Save(ctx context.Context) (*District, error) {
	if v, ok := duo.mutation.District(); ok {
		if err := district.DistrictValidator(v); err != nil {
			return nil, &ValidationError{Name: "district", err: fmt.Errorf("ent: validator failed for field \"district\": %w", err)}
		}
	}

	var (
		err  error
		node *District
	)
	if len(duo.hooks) == 0 {
		node, err = duo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DistrictMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			duo.mutation = mutation
			node, err = duo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(duo.hooks) - 1; i >= 0; i-- {
			mut = duo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, duo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DistrictUpdateOne) SaveX(ctx context.Context) *District {
	d, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return d
}

// Exec executes the query on the entity.
func (duo *DistrictUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DistrictUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DistrictUpdateOne) sqlSave(ctx context.Context) (d *District, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   district.Table,
			Columns: district.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: district.FieldID,
			},
		},
	}
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing District.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := duo.mutation.District(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: district.FieldDistrict,
		})
	}
	if duo.mutation.DistSubdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.DistSubdTable,
			Columns: []string{district.DistSubdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subdistrict.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DistSubdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.DistSubdTable,
			Columns: []string{district.DistSubdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subdistrict.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.DistPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.DistPostTable,
			Columns: []string{district.DistPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: postal.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DistPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   district.DistPostTable,
			Columns: []string{district.DistPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: postal.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := duo.mutation.RemovedDistProvIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.DistProvTable,
			Columns: []string{district.DistProvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.DistProvIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   district.DistProvTable,
			Columns: []string{district.DistProvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	d = &District{config: duo.config}
	_spec.Assign = d.assignValues
	_spec.ScanValues = d.scanValues()
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{district.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return d, nil
}
