// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team17/app/ent/institution"
)

// Institution is the model entity for the Institution schema.
type Institution struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Institution holds the value of the "institution" field.
	Institution string `json:"institution,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InstitutionQuery when eager-loading is set.
	Edges InstitutionEdges `json:"edges"`
}

// InstitutionEdges holds the relations/edges for other nodes in the graph.
type InstitutionEdges struct {
	// InstCour holds the value of the inst_cour edge.
	InstCour []*Course
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// InstCourOrErr returns the InstCour value or an error if the edge
// was not loaded in eager-loading.
func (e InstitutionEdges) InstCourOrErr() ([]*Course, error) {
	if e.loadedTypes[0] {
		return e.InstCour, nil
	}
	return nil, &NotLoadedError{edge: "inst_cour"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Institution) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // institution
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Institution fields.
func (i *Institution) assignValues(values ...interface{}) error {
	if m, n := len(values), len(institution.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	i.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field institution", values[0])
	} else if value.Valid {
		i.Institution = value.String
	}
	return nil
}

// QueryInstCour queries the inst_cour edge of the Institution.
func (i *Institution) QueryInstCour() *CourseQuery {
	return (&InstitutionClient{config: i.config}).QueryInstCour(i)
}

// Update returns a builder for updating this Institution.
// Note that, you need to call Institution.Unwrap() before calling this method, if this Institution
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Institution) Update() *InstitutionUpdateOne {
	return (&InstitutionClient{config: i.config}).UpdateOne(i)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (i *Institution) Unwrap() *Institution {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Institution is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Institution) String() string {
	var builder strings.Builder
	builder.WriteString("Institution(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", institution=")
	builder.WriteString(i.Institution)
	builder.WriteByte(')')
	return builder.String()
}

// Institutions is a parsable slice of Institution.
type Institutions []*Institution

func (i Institutions) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
