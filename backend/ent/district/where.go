// Code generated by entc, DO NOT EDIT.

package district

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team17/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// District applies equality check predicate on the "district" field. It's identical to DistrictEQ.
func District(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrict), v))
	})
}

// DistrictEQ applies the EQ predicate on the "district" field.
func DistrictEQ(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDistrict), v))
	})
}

// DistrictNEQ applies the NEQ predicate on the "district" field.
func DistrictNEQ(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDistrict), v))
	})
}

// DistrictIn applies the In predicate on the "district" field.
func DistrictIn(vs ...string) predicate.District {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDistrict), v...))
	})
}

// DistrictNotIn applies the NotIn predicate on the "district" field.
func DistrictNotIn(vs ...string) predicate.District {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.District(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDistrict), v...))
	})
}

// DistrictGT applies the GT predicate on the "district" field.
func DistrictGT(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDistrict), v))
	})
}

// DistrictGTE applies the GTE predicate on the "district" field.
func DistrictGTE(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDistrict), v))
	})
}

// DistrictLT applies the LT predicate on the "district" field.
func DistrictLT(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDistrict), v))
	})
}

// DistrictLTE applies the LTE predicate on the "district" field.
func DistrictLTE(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDistrict), v))
	})
}

// DistrictContains applies the Contains predicate on the "district" field.
func DistrictContains(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDistrict), v))
	})
}

// DistrictHasPrefix applies the HasPrefix predicate on the "district" field.
func DistrictHasPrefix(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDistrict), v))
	})
}

// DistrictHasSuffix applies the HasSuffix predicate on the "district" field.
func DistrictHasSuffix(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDistrict), v))
	})
}

// DistrictEqualFold applies the EqualFold predicate on the "district" field.
func DistrictEqualFold(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDistrict), v))
	})
}

// DistrictContainsFold applies the ContainsFold predicate on the "district" field.
func DistrictContainsFold(v string) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDistrict), v))
	})
}

// HasDistSubd applies the HasEdge predicate on the "dist_subd" edge.
func HasDistSubd() predicate.District {
	return predicate.District(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DistSubdTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DistSubdTable, DistSubdColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDistSubdWith applies the HasEdge predicate on the "dist_subd" edge with a given conditions (other predicates).
func HasDistSubdWith(preds ...predicate.Subdistrict) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DistSubdInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DistSubdTable, DistSubdColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDistPost applies the HasEdge predicate on the "dist_post" edge.
func HasDistPost() predicate.District {
	return predicate.District(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DistPostTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DistPostTable, DistPostColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDistPostWith applies the HasEdge predicate on the "dist_post" edge with a given conditions (other predicates).
func HasDistPostWith(preds ...predicate.Postal) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DistPostInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, DistPostTable, DistPostColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDistProv applies the HasEdge predicate on the "dist_prov" edge.
func HasDistProv() predicate.District {
	return predicate.District(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DistProvTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DistProvTable, DistProvColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDistProvWith applies the HasEdge predicate on the "dist_prov" edge with a given conditions (other predicates).
func HasDistProvWith(preds ...predicate.Province) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DistProvInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DistProvTable, DistProvColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.District) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.District) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.District) predicate.District {
	return predicate.District(func(s *sql.Selector) {
		p(s.Not())
	})
}
