// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/results"
	"github.com/sut63/team17/app/ent/subject"
)

// SubjectCreate is the builder for creating a Subject entity.
type SubjectCreate struct {
	config
	mutation *SubjectMutation
	hooks    []Hook
}

// SetCode sets the code field.
func (sc *SubjectCreate) SetCode(i int) *SubjectCreate {
	sc.mutation.SetCode(i)
	return sc
}

// SetSubjects sets the subjects field.
func (sc *SubjectCreate) SetSubjects(s string) *SubjectCreate {
	sc.mutation.SetSubjects(s)
	return sc
}

// SetCreditpiont sets the creditpiont field.
func (sc *SubjectCreate) SetCreditpiont(i int) *SubjectCreate {
	sc.mutation.SetCreditpiont(i)
	return sc
}

// AddSubjResuIDs adds the subj_resu edge to Results by ids.
func (sc *SubjectCreate) AddSubjResuIDs(ids ...int) *SubjectCreate {
	sc.mutation.AddSubjResuIDs(ids...)
	return sc
}

// AddSubjResu adds the subj_resu edges to Results.
func (sc *SubjectCreate) AddSubjResu(r ...*Results) *SubjectCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return sc.AddSubjResuIDs(ids...)
}

// Mutation returns the SubjectMutation object of the builder.
func (sc *SubjectCreate) Mutation() *SubjectMutation {
	return sc.mutation
}

// Save creates the Subject in the database.
func (sc *SubjectCreate) Save(ctx context.Context) (*Subject, error) {
	if _, ok := sc.mutation.Code(); !ok {
		return nil, &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if v, ok := sc.mutation.Code(); ok {
		if err := subject.CodeValidator(v); err != nil {
			return nil, &ValidationError{Name: "code", err: fmt.Errorf("ent: validator failed for field \"code\": %w", err)}
		}
	}
	if _, ok := sc.mutation.Subjects(); !ok {
		return nil, &ValidationError{Name: "subjects", err: errors.New("ent: missing required field \"subjects\"")}
	}
	if v, ok := sc.mutation.Subjects(); ok {
		if err := subject.SubjectsValidator(v); err != nil {
			return nil, &ValidationError{Name: "subjects", err: fmt.Errorf("ent: validator failed for field \"subjects\": %w", err)}
		}
	}
	if _, ok := sc.mutation.Creditpiont(); !ok {
		return nil, &ValidationError{Name: "creditpiont", err: errors.New("ent: missing required field \"creditpiont\"")}
	}
	if v, ok := sc.mutation.Creditpiont(); ok {
		if err := subject.CreditpiontValidator(v); err != nil {
			return nil, &ValidationError{Name: "creditpiont", err: fmt.Errorf("ent: validator failed for field \"creditpiont\": %w", err)}
		}
	}
	var (
		err  error
		node *Subject
	)
	if len(sc.hooks) == 0 {
		node, err = sc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*SubjectMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			sc.mutation = mutation
			node, err = sc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(sc.hooks) - 1; i >= 0; i-- {
			mut = sc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, sc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubjectCreate) SaveX(ctx context.Context) *Subject {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (sc *SubjectCreate) sqlSave(ctx context.Context) (*Subject, error) {
	s, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	s.ID = int(id)
	return s, nil
}

func (sc *SubjectCreate) createSpec() (*Subject, *sqlgraph.CreateSpec) {
	var (
		s     = &Subject{config: sc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: subject.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: subject.FieldID,
			},
		}
	)
	if value, ok := sc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subject.FieldCode,
		})
		s.Code = value
	}
	if value, ok := sc.mutation.Subjects(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: subject.FieldSubjects,
		})
		s.Subjects = value
	}
	if value, ok := sc.mutation.Creditpiont(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: subject.FieldCreditpiont,
		})
		s.Creditpiont = value
	}
	if nodes := sc.mutation.SubjResuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   subject.SubjResuTable,
			Columns: []string{subject.SubjResuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: results.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return s, _spec
}
