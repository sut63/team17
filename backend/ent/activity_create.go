// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/activity"
	"github.com/sut63/team17/app/ent/agency"
	"github.com/sut63/team17/app/ent/place"
	"github.com/sut63/team17/app/ent/student"
	"github.com/sut63/team17/app/ent/term"
	"github.com/sut63/team17/app/ent/year"
)

// ActivityCreate is the builder for creating a Activity entity.
type ActivityCreate struct {
	config
	mutation *ActivityMutation
	hooks    []Hook
}

// SetACTIVITYNAME sets the ACTIVITYNAME field.
func (ac *ActivityCreate) SetACTIVITYNAME(s string) *ActivityCreate {
	ac.mutation.SetACTIVITYNAME(s)
	return ac
}

// SetAdded sets the added field.
func (ac *ActivityCreate) SetAdded(t time.Time) *ActivityCreate {
	ac.mutation.SetAdded(t)
	return ac
}

// SetHours sets the hours field.
func (ac *ActivityCreate) SetHours(i int) *ActivityCreate {
	ac.mutation.SetHours(i)
	return ac
}

// SetActiStudID sets the acti_stud edge to Student by id.
func (ac *ActivityCreate) SetActiStudID(id int) *ActivityCreate {
	ac.mutation.SetActiStudID(id)
	return ac
}

// SetNillableActiStudID sets the acti_stud edge to Student by id if the given value is not nil.
func (ac *ActivityCreate) SetNillableActiStudID(id *int) *ActivityCreate {
	if id != nil {
		ac = ac.SetActiStudID(*id)
	}
	return ac
}

// SetActiStud sets the acti_stud edge to Student.
func (ac *ActivityCreate) SetActiStud(s *Student) *ActivityCreate {
	return ac.SetActiStudID(s.ID)
}

// SetActiPlaceID sets the acti_place edge to Place by id.
func (ac *ActivityCreate) SetActiPlaceID(id int) *ActivityCreate {
	ac.mutation.SetActiPlaceID(id)
	return ac
}

// SetNillableActiPlaceID sets the acti_place edge to Place by id if the given value is not nil.
func (ac *ActivityCreate) SetNillableActiPlaceID(id *int) *ActivityCreate {
	if id != nil {
		ac = ac.SetActiPlaceID(*id)
	}
	return ac
}

// SetActiPlace sets the acti_place edge to Place.
func (ac *ActivityCreate) SetActiPlace(p *Place) *ActivityCreate {
	return ac.SetActiPlaceID(p.ID)
}

// SetActiAgenID sets the acti_agen edge to Agency by id.
func (ac *ActivityCreate) SetActiAgenID(id int) *ActivityCreate {
	ac.mutation.SetActiAgenID(id)
	return ac
}

// SetNillableActiAgenID sets the acti_agen edge to Agency by id if the given value is not nil.
func (ac *ActivityCreate) SetNillableActiAgenID(id *int) *ActivityCreate {
	if id != nil {
		ac = ac.SetActiAgenID(*id)
	}
	return ac
}

// SetActiAgen sets the acti_agen edge to Agency.
func (ac *ActivityCreate) SetActiAgen(a *Agency) *ActivityCreate {
	return ac.SetActiAgenID(a.ID)
}

// SetActiYearID sets the acti_year edge to Year by id.
func (ac *ActivityCreate) SetActiYearID(id int) *ActivityCreate {
	ac.mutation.SetActiYearID(id)
	return ac
}

// SetNillableActiYearID sets the acti_year edge to Year by id if the given value is not nil.
func (ac *ActivityCreate) SetNillableActiYearID(id *int) *ActivityCreate {
	if id != nil {
		ac = ac.SetActiYearID(*id)
	}
	return ac
}

// SetActiYear sets the acti_year edge to Year.
func (ac *ActivityCreate) SetActiYear(y *Year) *ActivityCreate {
	return ac.SetActiYearID(y.ID)
}

// SetActiTermID sets the acti_term edge to Term by id.
func (ac *ActivityCreate) SetActiTermID(id int) *ActivityCreate {
	ac.mutation.SetActiTermID(id)
	return ac
}

// SetNillableActiTermID sets the acti_term edge to Term by id if the given value is not nil.
func (ac *ActivityCreate) SetNillableActiTermID(id *int) *ActivityCreate {
	if id != nil {
		ac = ac.SetActiTermID(*id)
	}
	return ac
}

// SetActiTerm sets the acti_term edge to Term.
func (ac *ActivityCreate) SetActiTerm(t *Term) *ActivityCreate {
	return ac.SetActiTermID(t.ID)
}

// Mutation returns the ActivityMutation object of the builder.
func (ac *ActivityCreate) Mutation() *ActivityMutation {
	return ac.mutation
}

// Save creates the Activity in the database.
func (ac *ActivityCreate) Save(ctx context.Context) (*Activity, error) {
	if _, ok := ac.mutation.ACTIVITYNAME(); !ok {
		return nil, &ValidationError{Name: "ACTIVITYNAME", err: errors.New("ent: missing required field \"ACTIVITYNAME\"")}
	}
	if v, ok := ac.mutation.ACTIVITYNAME(); ok {
		if err := activity.ACTIVITYNAMEValidator(v); err != nil {
			return nil, &ValidationError{Name: "ACTIVITYNAME", err: fmt.Errorf("ent: validator failed for field \"ACTIVITYNAME\": %w", err)}
		}
	}
	if _, ok := ac.mutation.Added(); !ok {
		return nil, &ValidationError{Name: "added", err: errors.New("ent: missing required field \"added\"")}
	}
	if _, ok := ac.mutation.Hours(); !ok {
		return nil, &ValidationError{Name: "hours", err: errors.New("ent: missing required field \"hours\"")}
	}
	if v, ok := ac.mutation.Hours(); ok {
		if err := activity.HoursValidator(v); err != nil {
			return nil, &ValidationError{Name: "hours", err: fmt.Errorf("ent: validator failed for field \"hours\": %w", err)}
		}
	}
	var (
		err  error
		node *Activity
	)
	if len(ac.hooks) == 0 {
		node, err = ac.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			ac.mutation = mutation
			node, err = ac.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ac.hooks) - 1; i >= 0; i-- {
			mut = ac.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ac.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ac *ActivityCreate) SaveX(ctx context.Context) *Activity {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (ac *ActivityCreate) sqlSave(ctx context.Context) (*Activity, error) {
	a, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	a.ID = int(id)
	return a, nil
}

func (ac *ActivityCreate) createSpec() (*Activity, *sqlgraph.CreateSpec) {
	var (
		a     = &Activity{config: ac.config}
		_spec = &sqlgraph.CreateSpec{
			Table: activity.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activity.FieldID,
			},
		}
	)
	if value, ok := ac.mutation.ACTIVITYNAME(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldACTIVITYNAME,
		})
		a.ACTIVITYNAME = value
	}
	if value, ok := ac.mutation.Added(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldAdded,
		})
		a.Added = value
	}
	if value, ok := ac.mutation.Hours(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldHours,
		})
		a.Hours = value
	}
	if nodes := ac.mutation.ActiStudIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiStudTable,
			Columns: []string{activity.ActiStudColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ActiPlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiPlaceTable,
			Columns: []string{activity.ActiPlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ActiAgenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiAgenTable,
			Columns: []string{activity.ActiAgenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ActiYearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiYearTable,
			Columns: []string{activity.ActiYearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: year.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ac.mutation.ActiTermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiTermTable,
			Columns: []string{activity.ActiTermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return a, _spec
}
