// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team17/app/ent/district"
	"github.com/sut63/team17/app/ent/postal"
	"github.com/sut63/team17/app/ent/subdistrict"
)

// District is the model entity for the District schema.
type District struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// District holds the value of the "district" field.
	District string `json:"district,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DistrictQuery when eager-loading is set.
	Edges                 DistrictEdges `json:"edges"`
	postal_post_dist      *int
	subdistrict_subd_dist *int
}

// DistrictEdges holds the relations/edges for other nodes in the graph.
type DistrictEdges struct {
	// DistSubd holds the value of the dist_subd edge.
	DistSubd *Subdistrict
	// DistPost holds the value of the dist_post edge.
	DistPost *Postal
	// DistProv holds the value of the dist_prov edge.
	DistProv []*Province
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// DistSubdOrErr returns the DistSubd value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DistrictEdges) DistSubdOrErr() (*Subdistrict, error) {
	if e.loadedTypes[0] {
		if e.DistSubd == nil {
			// The edge dist_subd was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: subdistrict.Label}
		}
		return e.DistSubd, nil
	}
	return nil, &NotLoadedError{edge: "dist_subd"}
}

// DistPostOrErr returns the DistPost value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DistrictEdges) DistPostOrErr() (*Postal, error) {
	if e.loadedTypes[1] {
		if e.DistPost == nil {
			// The edge dist_post was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: postal.Label}
		}
		return e.DistPost, nil
	}
	return nil, &NotLoadedError{edge: "dist_post"}
}

// DistProvOrErr returns the DistProv value or an error if the edge
// was not loaded in eager-loading.
func (e DistrictEdges) DistProvOrErr() ([]*Province, error) {
	if e.loadedTypes[2] {
		return e.DistProv, nil
	}
	return nil, &NotLoadedError{edge: "dist_prov"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*District) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // district
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*District) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // postal_post_dist
		&sql.NullInt64{}, // subdistrict_subd_dist
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the District fields.
func (d *District) assignValues(values ...interface{}) error {
	if m, n := len(values), len(district.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	d.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field district", values[0])
	} else if value.Valid {
		d.District = value.String
	}
	values = values[1:]
	if len(values) == len(district.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field postal_post_dist", value)
		} else if value.Valid {
			d.postal_post_dist = new(int)
			*d.postal_post_dist = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field subdistrict_subd_dist", value)
		} else if value.Valid {
			d.subdistrict_subd_dist = new(int)
			*d.subdistrict_subd_dist = int(value.Int64)
		}
	}
	return nil
}

// QueryDistSubd queries the dist_subd edge of the District.
func (d *District) QueryDistSubd() *SubdistrictQuery {
	return (&DistrictClient{config: d.config}).QueryDistSubd(d)
}

// QueryDistPost queries the dist_post edge of the District.
func (d *District) QueryDistPost() *PostalQuery {
	return (&DistrictClient{config: d.config}).QueryDistPost(d)
}

// QueryDistProv queries the dist_prov edge of the District.
func (d *District) QueryDistProv() *ProvinceQuery {
	return (&DistrictClient{config: d.config}).QueryDistProv(d)
}

// Update returns a builder for updating this District.
// Note that, you need to call District.Unwrap() before calling this method, if this District
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *District) Update() *DistrictUpdateOne {
	return (&DistrictClient{config: d.config}).UpdateOne(d)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (d *District) Unwrap() *District {
	tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: District is not a transactional entity")
	}
	d.config.driver = tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *District) String() string {
	var builder strings.Builder
	builder.WriteString("District(")
	builder.WriteString(fmt.Sprintf("id=%v", d.ID))
	builder.WriteString(", district=")
	builder.WriteString(d.District)
	builder.WriteByte(')')
	return builder.String()
}

// Districts is a parsable slice of District.
type Districts []*District

func (d Districts) config(cfg config) {
	for _i := range d {
		d[_i].config = cfg
	}
}
