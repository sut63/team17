// Code generated by entc, DO NOT EDIT.

package course

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team17/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Course applies equality check predicate on the "course" field. It's identical to CourseEQ.
func Course(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourse), v))
	})
}

// Annotation applies equality check predicate on the "annotation" field. It's identical to AnnotationEQ.
func Annotation(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnnotation), v))
	})
}

// Credit applies equality check predicate on the "credit" field. It's identical to CreditEQ.
func Credit(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCredit), v))
	})
}

// CourseID applies equality check predicate on the "course_id" field. It's identical to CourseIDEQ.
func CourseID(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseID), v))
	})
}

// CourseEQ applies the EQ predicate on the "course" field.
func CourseEQ(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourse), v))
	})
}

// CourseNEQ applies the NEQ predicate on the "course" field.
func CourseNEQ(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourse), v))
	})
}

// CourseIn applies the In predicate on the "course" field.
func CourseIn(vs ...string) predicate.Course {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Course(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourse), v...))
	})
}

// CourseNotIn applies the NotIn predicate on the "course" field.
func CourseNotIn(vs ...string) predicate.Course {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Course(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourse), v...))
	})
}

// CourseGT applies the GT predicate on the "course" field.
func CourseGT(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourse), v))
	})
}

// CourseGTE applies the GTE predicate on the "course" field.
func CourseGTE(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourse), v))
	})
}

// CourseLT applies the LT predicate on the "course" field.
func CourseLT(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourse), v))
	})
}

// CourseLTE applies the LTE predicate on the "course" field.
func CourseLTE(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourse), v))
	})
}

// CourseContains applies the Contains predicate on the "course" field.
func CourseContains(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCourse), v))
	})
}

// CourseHasPrefix applies the HasPrefix predicate on the "course" field.
func CourseHasPrefix(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCourse), v))
	})
}

// CourseHasSuffix applies the HasSuffix predicate on the "course" field.
func CourseHasSuffix(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCourse), v))
	})
}

// CourseEqualFold applies the EqualFold predicate on the "course" field.
func CourseEqualFold(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCourse), v))
	})
}

// CourseContainsFold applies the ContainsFold predicate on the "course" field.
func CourseContainsFold(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCourse), v))
	})
}

// AnnotationEQ applies the EQ predicate on the "annotation" field.
func AnnotationEQ(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAnnotation), v))
	})
}

// AnnotationNEQ applies the NEQ predicate on the "annotation" field.
func AnnotationNEQ(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAnnotation), v))
	})
}

// AnnotationIn applies the In predicate on the "annotation" field.
func AnnotationIn(vs ...string) predicate.Course {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Course(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAnnotation), v...))
	})
}

// AnnotationNotIn applies the NotIn predicate on the "annotation" field.
func AnnotationNotIn(vs ...string) predicate.Course {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Course(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAnnotation), v...))
	})
}

// AnnotationGT applies the GT predicate on the "annotation" field.
func AnnotationGT(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAnnotation), v))
	})
}

// AnnotationGTE applies the GTE predicate on the "annotation" field.
func AnnotationGTE(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAnnotation), v))
	})
}

// AnnotationLT applies the LT predicate on the "annotation" field.
func AnnotationLT(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAnnotation), v))
	})
}

// AnnotationLTE applies the LTE predicate on the "annotation" field.
func AnnotationLTE(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAnnotation), v))
	})
}

// AnnotationContains applies the Contains predicate on the "annotation" field.
func AnnotationContains(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAnnotation), v))
	})
}

// AnnotationHasPrefix applies the HasPrefix predicate on the "annotation" field.
func AnnotationHasPrefix(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAnnotation), v))
	})
}

// AnnotationHasSuffix applies the HasSuffix predicate on the "annotation" field.
func AnnotationHasSuffix(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAnnotation), v))
	})
}

// AnnotationEqualFold applies the EqualFold predicate on the "annotation" field.
func AnnotationEqualFold(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAnnotation), v))
	})
}

// AnnotationContainsFold applies the ContainsFold predicate on the "annotation" field.
func AnnotationContainsFold(v string) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAnnotation), v))
	})
}

// CreditEQ applies the EQ predicate on the "credit" field.
func CreditEQ(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCredit), v))
	})
}

// CreditNEQ applies the NEQ predicate on the "credit" field.
func CreditNEQ(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCredit), v))
	})
}

// CreditIn applies the In predicate on the "credit" field.
func CreditIn(vs ...int) predicate.Course {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Course(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCredit), v...))
	})
}

// CreditNotIn applies the NotIn predicate on the "credit" field.
func CreditNotIn(vs ...int) predicate.Course {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Course(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCredit), v...))
	})
}

// CreditGT applies the GT predicate on the "credit" field.
func CreditGT(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCredit), v))
	})
}

// CreditGTE applies the GTE predicate on the "credit" field.
func CreditGTE(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCredit), v))
	})
}

// CreditLT applies the LT predicate on the "credit" field.
func CreditLT(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCredit), v))
	})
}

// CreditLTE applies the LTE predicate on the "credit" field.
func CreditLTE(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCredit), v))
	})
}

// CourseIDEQ applies the EQ predicate on the "course_id" field.
func CourseIDEQ(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCourseID), v))
	})
}

// CourseIDNEQ applies the NEQ predicate on the "course_id" field.
func CourseIDNEQ(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCourseID), v))
	})
}

// CourseIDIn applies the In predicate on the "course_id" field.
func CourseIDIn(vs ...int) predicate.Course {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Course(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCourseID), v...))
	})
}

// CourseIDNotIn applies the NotIn predicate on the "course_id" field.
func CourseIDNotIn(vs ...int) predicate.Course {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Course(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCourseID), v...))
	})
}

// CourseIDGT applies the GT predicate on the "course_id" field.
func CourseIDGT(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCourseID), v))
	})
}

// CourseIDGTE applies the GTE predicate on the "course_id" field.
func CourseIDGTE(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCourseID), v))
	})
}

// CourseIDLT applies the LT predicate on the "course_id" field.
func CourseIDLT(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCourseID), v))
	})
}

// CourseIDLTE applies the LTE predicate on the "course_id" field.
func CourseIDLTE(v int) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCourseID), v))
	})
}

// HasCourFacu applies the HasEdge predicate on the "cour_facu" edge.
func HasCourFacu() predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourFacuTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourFacuTable, CourFacuColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourFacuWith applies the HasEdge predicate on the "cour_facu" edge with a given conditions (other predicates).
func HasCourFacuWith(preds ...predicate.Faculty) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourFacuInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourFacuTable, CourFacuColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourDegr applies the HasEdge predicate on the "cour_degr" edge.
func HasCourDegr() predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourDegrTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourDegrTable, CourDegrColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourDegrWith applies the HasEdge predicate on the "cour_degr" edge with a given conditions (other predicates).
func HasCourDegrWith(preds ...predicate.Degree) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourDegrInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourDegrTable, CourDegrColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasCourInst applies the HasEdge predicate on the "cour_inst" edge.
func HasCourInst() predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourInstTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourInstTable, CourInstColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasCourInstWith applies the HasEdge predicate on the "cour_inst" edge with a given conditions (other predicates).
func HasCourInstWith(preds ...predicate.Institution) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(CourInstInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, CourInstTable, CourInstColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Course) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Course) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Course) predicate.Course {
	return predicate.Course(func(s *sql.Selector) {
		p(s.Not())
	})
}
