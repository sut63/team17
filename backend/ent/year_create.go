// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/activity"
	"github.com/sut63/team17/app/ent/results"
	"github.com/sut63/team17/app/ent/term"
	"github.com/sut63/team17/app/ent/year"
)

// YearCreate is the builder for creating a Year entity.
type YearCreate struct {
	config
	mutation *YearMutation
	hooks    []Hook
}

// SetYears sets the years field.
func (yc *YearCreate) SetYears(i int) *YearCreate {
	yc.mutation.SetYears(i)
	return yc
}

// AddYearTermIDs adds the year_term edge to Term by ids.
func (yc *YearCreate) AddYearTermIDs(ids ...int) *YearCreate {
	yc.mutation.AddYearTermIDs(ids...)
	return yc
}

// AddYearTerm adds the year_term edges to Term.
func (yc *YearCreate) AddYearTerm(t ...*Term) *YearCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return yc.AddYearTermIDs(ids...)
}

// AddYearResuIDs adds the year_resu edge to Results by ids.
func (yc *YearCreate) AddYearResuIDs(ids ...int) *YearCreate {
	yc.mutation.AddYearResuIDs(ids...)
	return yc
}

// AddYearResu adds the year_resu edges to Results.
func (yc *YearCreate) AddYearResu(r ...*Results) *YearCreate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return yc.AddYearResuIDs(ids...)
}

// AddYearActiIDs adds the year_acti edge to Activity by ids.
func (yc *YearCreate) AddYearActiIDs(ids ...int) *YearCreate {
	yc.mutation.AddYearActiIDs(ids...)
	return yc
}

// AddYearActi adds the year_acti edges to Activity.
func (yc *YearCreate) AddYearActi(a ...*Activity) *YearCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return yc.AddYearActiIDs(ids...)
}

// Mutation returns the YearMutation object of the builder.
func (yc *YearCreate) Mutation() *YearMutation {
	return yc.mutation
}

// Save creates the Year in the database.
func (yc *YearCreate) Save(ctx context.Context) (*Year, error) {
	if _, ok := yc.mutation.Years(); !ok {
		return nil, &ValidationError{Name: "years", err: errors.New("ent: missing required field \"years\"")}
	}
	if v, ok := yc.mutation.Years(); ok {
		if err := year.YearsValidator(v); err != nil {
			return nil, &ValidationError{Name: "years", err: fmt.Errorf("ent: validator failed for field \"years\": %w", err)}
		}
	}
	var (
		err  error
		node *Year
	)
	if len(yc.hooks) == 0 {
		node, err = yc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*YearMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			yc.mutation = mutation
			node, err = yc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(yc.hooks) - 1; i >= 0; i-- {
			mut = yc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, yc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (yc *YearCreate) SaveX(ctx context.Context) *Year {
	v, err := yc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (yc *YearCreate) sqlSave(ctx context.Context) (*Year, error) {
	y, _spec := yc.createSpec()
	if err := sqlgraph.CreateNode(ctx, yc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	y.ID = int(id)
	return y, nil
}

func (yc *YearCreate) createSpec() (*Year, *sqlgraph.CreateSpec) {
	var (
		y     = &Year{config: yc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: year.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: year.FieldID,
			},
		}
	)
	if value, ok := yc.mutation.Years(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: year.FieldYears,
		})
		y.Years = value
	}
	if nodes := yc.mutation.YearTermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   year.YearTermTable,
			Columns: []string{year.YearTermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := yc.mutation.YearResuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   year.YearResuTable,
			Columns: []string{year.YearResuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: results.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := yc.mutation.YearActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   year.YearActiTable,
			Columns: []string{year.YearActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return y, _spec
}
