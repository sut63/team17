// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/district"
	"github.com/sut63/team17/app/ent/province"
	"github.com/sut63/team17/app/ent/region"
	"github.com/sut63/team17/app/ent/student"
)

// ProvinceCreate is the builder for creating a Province entity.
type ProvinceCreate struct {
	config
	mutation *ProvinceMutation
	hooks    []Hook
}

// SetName sets the name field.
func (pc *ProvinceCreate) SetName(s string) *ProvinceCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetProvRegiID sets the prov_regi edge to Region by id.
func (pc *ProvinceCreate) SetProvRegiID(id int) *ProvinceCreate {
	pc.mutation.SetProvRegiID(id)
	return pc
}

// SetNillableProvRegiID sets the prov_regi edge to Region by id if the given value is not nil.
func (pc *ProvinceCreate) SetNillableProvRegiID(id *int) *ProvinceCreate {
	if id != nil {
		pc = pc.SetProvRegiID(*id)
	}
	return pc
}

// SetProvRegi sets the prov_regi edge to Region.
func (pc *ProvinceCreate) SetProvRegi(r *Region) *ProvinceCreate {
	return pc.SetProvRegiID(r.ID)
}

// SetProvDistID sets the prov_dist edge to District by id.
func (pc *ProvinceCreate) SetProvDistID(id int) *ProvinceCreate {
	pc.mutation.SetProvDistID(id)
	return pc
}

// SetNillableProvDistID sets the prov_dist edge to District by id if the given value is not nil.
func (pc *ProvinceCreate) SetNillableProvDistID(id *int) *ProvinceCreate {
	if id != nil {
		pc = pc.SetProvDistID(*id)
	}
	return pc
}

// SetProvDist sets the prov_dist edge to District.
func (pc *ProvinceCreate) SetProvDist(d *District) *ProvinceCreate {
	return pc.SetProvDistID(d.ID)
}

// AddProvStudIDs adds the prov_stud edge to Student by ids.
func (pc *ProvinceCreate) AddProvStudIDs(ids ...int) *ProvinceCreate {
	pc.mutation.AddProvStudIDs(ids...)
	return pc
}

// AddProvStud adds the prov_stud edges to Student.
func (pc *ProvinceCreate) AddProvStud(s ...*Student) *ProvinceCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddProvStudIDs(ids...)
}

// Mutation returns the ProvinceMutation object of the builder.
func (pc *ProvinceCreate) Mutation() *ProvinceMutation {
	return pc.mutation
}

// Save creates the Province in the database.
func (pc *ProvinceCreate) Save(ctx context.Context) (*Province, error) {
	if _, ok := pc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := province.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	var (
		err  error
		node *Province
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvinceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProvinceCreate) SaveX(ctx context.Context) *Province {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProvinceCreate) sqlSave(ctx context.Context) (*Province, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *ProvinceCreate) createSpec() (*Province, *sqlgraph.CreateSpec) {
	var (
		pr    = &Province{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: province.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: province.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: province.FieldName,
		})
		pr.Name = value
	}
	if nodes := pc.mutation.ProvRegiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   province.ProvRegiTable,
			Columns: []string{province.ProvRegiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProvDistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   province.ProvDistTable,
			Columns: []string{province.ProvDistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: district.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProvStudIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.ProvStudTable,
			Columns: []string{province.ProvStudColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
