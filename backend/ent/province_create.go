// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/continent"
	"github.com/sut63/team17/app/ent/country"
	"github.com/sut63/team17/app/ent/province"
	"github.com/sut63/team17/app/ent/region"
	"github.com/sut63/team17/app/ent/student"
)

// ProvinceCreate is the builder for creating a Province entity.
type ProvinceCreate struct {
	config
	mutation *ProvinceMutation
	hooks    []Hook
}

// SetProvince sets the province field.
func (pc *ProvinceCreate) SetProvince(s string) *ProvinceCreate {
	pc.mutation.SetProvince(s)
	return pc
}

// SetDistrict sets the district field.
func (pc *ProvinceCreate) SetDistrict(s string) *ProvinceCreate {
	pc.mutation.SetDistrict(s)
	return pc
}

// SetSubdistrict sets the subdistrict field.
func (pc *ProvinceCreate) SetSubdistrict(s string) *ProvinceCreate {
	pc.mutation.SetSubdistrict(s)
	return pc
}

// SetPostal sets the postal field.
func (pc *ProvinceCreate) SetPostal(i int) *ProvinceCreate {
	pc.mutation.SetPostal(i)
	return pc
}

// SetProvRegiID sets the prov_regi edge to Region by id.
func (pc *ProvinceCreate) SetProvRegiID(id int) *ProvinceCreate {
	pc.mutation.SetProvRegiID(id)
	return pc
}

// SetNillableProvRegiID sets the prov_regi edge to Region by id if the given value is not nil.
func (pc *ProvinceCreate) SetNillableProvRegiID(id *int) *ProvinceCreate {
	if id != nil {
		pc = pc.SetProvRegiID(*id)
	}
	return pc
}

// SetProvRegi sets the prov_regi edge to Region.
func (pc *ProvinceCreate) SetProvRegi(r *Region) *ProvinceCreate {
	return pc.SetProvRegiID(r.ID)
}

// SetProvCounID sets the prov_coun edge to Country by id.
func (pc *ProvinceCreate) SetProvCounID(id int) *ProvinceCreate {
	pc.mutation.SetProvCounID(id)
	return pc
}

// SetNillableProvCounID sets the prov_coun edge to Country by id if the given value is not nil.
func (pc *ProvinceCreate) SetNillableProvCounID(id *int) *ProvinceCreate {
	if id != nil {
		pc = pc.SetProvCounID(*id)
	}
	return pc
}

// SetProvCoun sets the prov_coun edge to Country.
func (pc *ProvinceCreate) SetProvCoun(c *Country) *ProvinceCreate {
	return pc.SetProvCounID(c.ID)
}

// SetProvContID sets the prov_cont edge to Continent by id.
func (pc *ProvinceCreate) SetProvContID(id int) *ProvinceCreate {
	pc.mutation.SetProvContID(id)
	return pc
}

// SetNillableProvContID sets the prov_cont edge to Continent by id if the given value is not nil.
func (pc *ProvinceCreate) SetNillableProvContID(id *int) *ProvinceCreate {
	if id != nil {
		pc = pc.SetProvContID(*id)
	}
	return pc
}

// SetProvCont sets the prov_cont edge to Continent.
func (pc *ProvinceCreate) SetProvCont(c *Continent) *ProvinceCreate {
	return pc.SetProvContID(c.ID)
}

// AddProvStudIDs adds the prov_stud edge to Student by ids.
func (pc *ProvinceCreate) AddProvStudIDs(ids ...int) *ProvinceCreate {
	pc.mutation.AddProvStudIDs(ids...)
	return pc
}

// AddProvStud adds the prov_stud edges to Student.
func (pc *ProvinceCreate) AddProvStud(s ...*Student) *ProvinceCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddProvStudIDs(ids...)
}

// AddDistStudIDs adds the dist_stud edge to Student by ids.
func (pc *ProvinceCreate) AddDistStudIDs(ids ...int) *ProvinceCreate {
	pc.mutation.AddDistStudIDs(ids...)
	return pc
}

// AddDistStud adds the dist_stud edges to Student.
func (pc *ProvinceCreate) AddDistStud(s ...*Student) *ProvinceCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddDistStudIDs(ids...)
}

// AddSubdStudIDs adds the subd_stud edge to Student by ids.
func (pc *ProvinceCreate) AddSubdStudIDs(ids ...int) *ProvinceCreate {
	pc.mutation.AddSubdStudIDs(ids...)
	return pc
}

// AddSubdStud adds the subd_stud edges to Student.
func (pc *ProvinceCreate) AddSubdStud(s ...*Student) *ProvinceCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddSubdStudIDs(ids...)
}

// AddPostStudIDs adds the post_stud edge to Student by ids.
func (pc *ProvinceCreate) AddPostStudIDs(ids ...int) *ProvinceCreate {
	pc.mutation.AddPostStudIDs(ids...)
	return pc
}

// AddPostStud adds the post_stud edges to Student.
func (pc *ProvinceCreate) AddPostStud(s ...*Student) *ProvinceCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return pc.AddPostStudIDs(ids...)
}

// Mutation returns the ProvinceMutation object of the builder.
func (pc *ProvinceCreate) Mutation() *ProvinceMutation {
	return pc.mutation
}

// Save creates the Province in the database.
func (pc *ProvinceCreate) Save(ctx context.Context) (*Province, error) {
	if _, ok := pc.mutation.Province(); !ok {
		return nil, &ValidationError{Name: "province", err: errors.New("ent: missing required field \"province\"")}
	}
	if v, ok := pc.mutation.Province(); ok {
		if err := province.ProvinceValidator(v); err != nil {
			return nil, &ValidationError{Name: "province", err: fmt.Errorf("ent: validator failed for field \"province\": %w", err)}
		}
	}
	if _, ok := pc.mutation.District(); !ok {
		return nil, &ValidationError{Name: "district", err: errors.New("ent: missing required field \"district\"")}
	}
	if v, ok := pc.mutation.District(); ok {
		if err := province.DistrictValidator(v); err != nil {
			return nil, &ValidationError{Name: "district", err: fmt.Errorf("ent: validator failed for field \"district\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Subdistrict(); !ok {
		return nil, &ValidationError{Name: "subdistrict", err: errors.New("ent: missing required field \"subdistrict\"")}
	}
	if v, ok := pc.mutation.Subdistrict(); ok {
		if err := province.SubdistrictValidator(v); err != nil {
			return nil, &ValidationError{Name: "subdistrict", err: fmt.Errorf("ent: validator failed for field \"subdistrict\": %w", err)}
		}
	}
	if _, ok := pc.mutation.Postal(); !ok {
		return nil, &ValidationError{Name: "postal", err: errors.New("ent: missing required field \"postal\"")}
	}
	if v, ok := pc.mutation.Postal(); ok {
		if err := province.PostalValidator(v); err != nil {
			return nil, &ValidationError{Name: "postal", err: fmt.Errorf("ent: validator failed for field \"postal\": %w", err)}
		}
	}
	var (
		err  error
		node *Province
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProvinceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProvinceCreate) SaveX(ctx context.Context) *Province {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProvinceCreate) sqlSave(ctx context.Context) (*Province, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *ProvinceCreate) createSpec() (*Province, *sqlgraph.CreateSpec) {
	var (
		pr    = &Province{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: province.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: province.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Province(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: province.FieldProvince,
		})
		pr.Province = value
	}
	if value, ok := pc.mutation.District(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: province.FieldDistrict,
		})
		pr.District = value
	}
	if value, ok := pc.mutation.Subdistrict(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: province.FieldSubdistrict,
		})
		pr.Subdistrict = value
	}
	if value, ok := pc.mutation.Postal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: province.FieldPostal,
		})
		pr.Postal = value
	}
	if nodes := pc.mutation.ProvRegiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   province.ProvRegiTable,
			Columns: []string{province.ProvRegiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: region.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProvCounIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   province.ProvCounTable,
			Columns: []string{province.ProvCounColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: country.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProvContIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   province.ProvContTable,
			Columns: []string{province.ProvContColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: continent.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProvStudIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.ProvStudTable,
			Columns: []string{province.ProvStudColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.DistStudIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.DistStudTable,
			Columns: []string{province.DistStudColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SubdStudIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.SubdStudTable,
			Columns: []string{province.SubdStudColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.PostStudIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   province.PostStudTable,
			Columns: []string{province.PostStudColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
