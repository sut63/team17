// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/activity"
	"github.com/sut63/team17/app/ent/agency"
	"github.com/sut63/team17/app/ent/place"
	"github.com/sut63/team17/app/ent/predicate"
	"github.com/sut63/team17/app/ent/student"
	"github.com/sut63/team17/app/ent/year"
)

// ActivityUpdate is the builder for updating Activity entities.
type ActivityUpdate struct {
	config
	hooks      []Hook
	mutation   *ActivityMutation
	predicates []predicate.Activity
}

// Where adds a new predicate for the builder.
func (au *ActivityUpdate) Where(ps ...predicate.Activity) *ActivityUpdate {
	au.predicates = append(au.predicates, ps...)
	return au
}

// SetACTIVITYNAME sets the ACTIVITYNAME field.
func (au *ActivityUpdate) SetACTIVITYNAME(s string) *ActivityUpdate {
	au.mutation.SetACTIVITYNAME(s)
	return au
}

// SetADDED sets the ADDED field.
func (au *ActivityUpdate) SetADDED(t time.Time) *ActivityUpdate {
	au.mutation.SetADDED(t)
	return au
}

// SetHOURS sets the HOURS field.
func (au *ActivityUpdate) SetHOURS(i int) *ActivityUpdate {
	au.mutation.ResetHOURS()
	au.mutation.SetHOURS(i)
	return au
}

// AddHOURS adds i to HOURS.
func (au *ActivityUpdate) AddHOURS(i int) *ActivityUpdate {
	au.mutation.AddHOURS(i)
	return au
}

// SetActiStudID sets the acti_stud edge to Student by id.
func (au *ActivityUpdate) SetActiStudID(id int) *ActivityUpdate {
	au.mutation.SetActiStudID(id)
	return au
}

// SetNillableActiStudID sets the acti_stud edge to Student by id if the given value is not nil.
func (au *ActivityUpdate) SetNillableActiStudID(id *int) *ActivityUpdate {
	if id != nil {
		au = au.SetActiStudID(*id)
	}
	return au
}

// SetActiStud sets the acti_stud edge to Student.
func (au *ActivityUpdate) SetActiStud(s *Student) *ActivityUpdate {
	return au.SetActiStudID(s.ID)
}

// SetActiPlaceID sets the acti_place edge to Place by id.
func (au *ActivityUpdate) SetActiPlaceID(id int) *ActivityUpdate {
	au.mutation.SetActiPlaceID(id)
	return au
}

// SetNillableActiPlaceID sets the acti_place edge to Place by id if the given value is not nil.
func (au *ActivityUpdate) SetNillableActiPlaceID(id *int) *ActivityUpdate {
	if id != nil {
		au = au.SetActiPlaceID(*id)
	}
	return au
}

// SetActiPlace sets the acti_place edge to Place.
func (au *ActivityUpdate) SetActiPlace(p *Place) *ActivityUpdate {
	return au.SetActiPlaceID(p.ID)
}

// SetActiAgenID sets the acti_agen edge to Agency by id.
func (au *ActivityUpdate) SetActiAgenID(id int) *ActivityUpdate {
	au.mutation.SetActiAgenID(id)
	return au
}

// SetNillableActiAgenID sets the acti_agen edge to Agency by id if the given value is not nil.
func (au *ActivityUpdate) SetNillableActiAgenID(id *int) *ActivityUpdate {
	if id != nil {
		au = au.SetActiAgenID(*id)
	}
	return au
}

// SetActiAgen sets the acti_agen edge to Agency.
func (au *ActivityUpdate) SetActiAgen(a *Agency) *ActivityUpdate {
	return au.SetActiAgenID(a.ID)
}

// SetActiYearID sets the acti_year edge to Year by id.
func (au *ActivityUpdate) SetActiYearID(id int) *ActivityUpdate {
	au.mutation.SetActiYearID(id)
	return au
}

// SetNillableActiYearID sets the acti_year edge to Year by id if the given value is not nil.
func (au *ActivityUpdate) SetNillableActiYearID(id *int) *ActivityUpdate {
	if id != nil {
		au = au.SetActiYearID(*id)
	}
	return au
}

// SetActiYear sets the acti_year edge to Year.
func (au *ActivityUpdate) SetActiYear(y *Year) *ActivityUpdate {
	return au.SetActiYearID(y.ID)
}

// Mutation returns the ActivityMutation object of the builder.
func (au *ActivityUpdate) Mutation() *ActivityMutation {
	return au.mutation
}

// ClearActiStud clears the acti_stud edge to Student.
func (au *ActivityUpdate) ClearActiStud() *ActivityUpdate {
	au.mutation.ClearActiStud()
	return au
}

// ClearActiPlace clears the acti_place edge to Place.
func (au *ActivityUpdate) ClearActiPlace() *ActivityUpdate {
	au.mutation.ClearActiPlace()
	return au
}

// ClearActiAgen clears the acti_agen edge to Agency.
func (au *ActivityUpdate) ClearActiAgen() *ActivityUpdate {
	au.mutation.ClearActiAgen()
	return au
}

// ClearActiYear clears the acti_year edge to Year.
func (au *ActivityUpdate) ClearActiYear() *ActivityUpdate {
	au.mutation.ClearActiYear()
	return au
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (au *ActivityUpdate) Save(ctx context.Context) (int, error) {

	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *ActivityUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *ActivityUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *ActivityUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *ActivityUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activity.Table,
			Columns: activity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activity.FieldID,
			},
		},
	}
	if ps := au.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.ACTIVITYNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldACTIVITYNAME,
		})
	}
	if value, ok := au.mutation.ADDED(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldADDED,
		})
	}
	if value, ok := au.mutation.HOURS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldHOURS,
		})
	}
	if value, ok := au.mutation.AddedHOURS(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldHOURS,
		})
	}
	if au.mutation.ActiStudCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiStudTable,
			Columns: []string{activity.ActiStudColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ActiStudIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiStudTable,
			Columns: []string{activity.ActiStudColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ActiPlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiPlaceTable,
			Columns: []string{activity.ActiPlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ActiPlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiPlaceTable,
			Columns: []string{activity.ActiPlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ActiAgenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiAgenTable,
			Columns: []string{activity.ActiAgenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ActiAgenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiAgenTable,
			Columns: []string{activity.ActiAgenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ActiYearCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiYearTable,
			Columns: []string{activity.ActiYearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: year.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ActiYearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiYearTable,
			Columns: []string{activity.ActiYearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: year.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// ActivityUpdateOne is the builder for updating a single Activity entity.
type ActivityUpdateOne struct {
	config
	hooks    []Hook
	mutation *ActivityMutation
}

// SetACTIVITYNAME sets the ACTIVITYNAME field.
func (auo *ActivityUpdateOne) SetACTIVITYNAME(s string) *ActivityUpdateOne {
	auo.mutation.SetACTIVITYNAME(s)
	return auo
}

// SetADDED sets the ADDED field.
func (auo *ActivityUpdateOne) SetADDED(t time.Time) *ActivityUpdateOne {
	auo.mutation.SetADDED(t)
	return auo
}

// SetHOURS sets the HOURS field.
func (auo *ActivityUpdateOne) SetHOURS(i int) *ActivityUpdateOne {
	auo.mutation.ResetHOURS()
	auo.mutation.SetHOURS(i)
	return auo
}

// AddHOURS adds i to HOURS.
func (auo *ActivityUpdateOne) AddHOURS(i int) *ActivityUpdateOne {
	auo.mutation.AddHOURS(i)
	return auo
}

// SetActiStudID sets the acti_stud edge to Student by id.
func (auo *ActivityUpdateOne) SetActiStudID(id int) *ActivityUpdateOne {
	auo.mutation.SetActiStudID(id)
	return auo
}

// SetNillableActiStudID sets the acti_stud edge to Student by id if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActiStudID(id *int) *ActivityUpdateOne {
	if id != nil {
		auo = auo.SetActiStudID(*id)
	}
	return auo
}

// SetActiStud sets the acti_stud edge to Student.
func (auo *ActivityUpdateOne) SetActiStud(s *Student) *ActivityUpdateOne {
	return auo.SetActiStudID(s.ID)
}

// SetActiPlaceID sets the acti_place edge to Place by id.
func (auo *ActivityUpdateOne) SetActiPlaceID(id int) *ActivityUpdateOne {
	auo.mutation.SetActiPlaceID(id)
	return auo
}

// SetNillableActiPlaceID sets the acti_place edge to Place by id if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActiPlaceID(id *int) *ActivityUpdateOne {
	if id != nil {
		auo = auo.SetActiPlaceID(*id)
	}
	return auo
}

// SetActiPlace sets the acti_place edge to Place.
func (auo *ActivityUpdateOne) SetActiPlace(p *Place) *ActivityUpdateOne {
	return auo.SetActiPlaceID(p.ID)
}

// SetActiAgenID sets the acti_agen edge to Agency by id.
func (auo *ActivityUpdateOne) SetActiAgenID(id int) *ActivityUpdateOne {
	auo.mutation.SetActiAgenID(id)
	return auo
}

// SetNillableActiAgenID sets the acti_agen edge to Agency by id if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActiAgenID(id *int) *ActivityUpdateOne {
	if id != nil {
		auo = auo.SetActiAgenID(*id)
	}
	return auo
}

// SetActiAgen sets the acti_agen edge to Agency.
func (auo *ActivityUpdateOne) SetActiAgen(a *Agency) *ActivityUpdateOne {
	return auo.SetActiAgenID(a.ID)
}

// SetActiYearID sets the acti_year edge to Year by id.
func (auo *ActivityUpdateOne) SetActiYearID(id int) *ActivityUpdateOne {
	auo.mutation.SetActiYearID(id)
	return auo
}

// SetNillableActiYearID sets the acti_year edge to Year by id if the given value is not nil.
func (auo *ActivityUpdateOne) SetNillableActiYearID(id *int) *ActivityUpdateOne {
	if id != nil {
		auo = auo.SetActiYearID(*id)
	}
	return auo
}

// SetActiYear sets the acti_year edge to Year.
func (auo *ActivityUpdateOne) SetActiYear(y *Year) *ActivityUpdateOne {
	return auo.SetActiYearID(y.ID)
}

// Mutation returns the ActivityMutation object of the builder.
func (auo *ActivityUpdateOne) Mutation() *ActivityMutation {
	return auo.mutation
}

// ClearActiStud clears the acti_stud edge to Student.
func (auo *ActivityUpdateOne) ClearActiStud() *ActivityUpdateOne {
	auo.mutation.ClearActiStud()
	return auo
}

// ClearActiPlace clears the acti_place edge to Place.
func (auo *ActivityUpdateOne) ClearActiPlace() *ActivityUpdateOne {
	auo.mutation.ClearActiPlace()
	return auo
}

// ClearActiAgen clears the acti_agen edge to Agency.
func (auo *ActivityUpdateOne) ClearActiAgen() *ActivityUpdateOne {
	auo.mutation.ClearActiAgen()
	return auo
}

// ClearActiYear clears the acti_year edge to Year.
func (auo *ActivityUpdateOne) ClearActiYear() *ActivityUpdateOne {
	auo.mutation.ClearActiYear()
	return auo
}

// Save executes the query and returns the updated entity.
func (auo *ActivityUpdateOne) Save(ctx context.Context) (*Activity, error) {

	var (
		err  error
		node *Activity
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ActivityMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *ActivityUpdateOne) SaveX(ctx context.Context) *Activity {
	a, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return a
}

// Exec executes the query on the entity.
func (auo *ActivityUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *ActivityUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *ActivityUpdateOne) sqlSave(ctx context.Context) (a *Activity, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   activity.Table,
			Columns: activity.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: activity.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Activity.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := auo.mutation.ACTIVITYNAME(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: activity.FieldACTIVITYNAME,
		})
	}
	if value, ok := auo.mutation.ADDED(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: activity.FieldADDED,
		})
	}
	if value, ok := auo.mutation.HOURS(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldHOURS,
		})
	}
	if value, ok := auo.mutation.AddedHOURS(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: activity.FieldHOURS,
		})
	}
	if auo.mutation.ActiStudCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiStudTable,
			Columns: []string{activity.ActiStudColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ActiStudIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiStudTable,
			Columns: []string{activity.ActiStudColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ActiPlaceCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiPlaceTable,
			Columns: []string{activity.ActiPlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ActiPlaceIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiPlaceTable,
			Columns: []string{activity.ActiPlaceColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: place.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ActiAgenCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiAgenTable,
			Columns: []string{activity.ActiAgenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agency.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ActiAgenIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiAgenTable,
			Columns: []string{activity.ActiAgenColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: agency.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ActiYearCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiYearTable,
			Columns: []string{activity.ActiYearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: year.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ActiYearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   activity.ActiYearTable,
			Columns: []string{activity.ActiYearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: year.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	a = &Activity{config: auo.config}
	_spec.Assign = a.assignValues
	_spec.ScanValues = a.scanValues()
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{activity.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return a, nil
}
