// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team17/app/ent/emp"
)

// Emp is the model entity for the Emp schema.
type Emp struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// User holds the value of the "user" field.
	User string `json:"user,omitempty"`
	// Pass holds the value of the "pass" field.
	Pass string `json:"pass,omitempty"`
	// Role holds the value of the "role" field.
	Role string `json:"role,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Emp) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // user
		&sql.NullString{}, // pass
		&sql.NullString{}, // role
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Emp fields.
func (e *Emp) assignValues(values ...interface{}) error {
	if m, n := len(values), len(emp.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	e.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field user", values[0])
	} else if value.Valid {
		e.User = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field pass", values[1])
	} else if value.Valid {
		e.Pass = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field role", values[2])
	} else if value.Valid {
		e.Role = value.String
	}
	return nil
}

// Update returns a builder for updating this Emp.
// Note that, you need to call Emp.Unwrap() before calling this method, if this Emp
// was returned from a transaction, and the transaction was committed or rolled back.
func (e *Emp) Update() *EmpUpdateOne {
	return (&EmpClient{config: e.config}).UpdateOne(e)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (e *Emp) Unwrap() *Emp {
	tx, ok := e.config.driver.(*txDriver)
	if !ok {
		panic("ent: Emp is not a transactional entity")
	}
	e.config.driver = tx.drv
	return e
}

// String implements the fmt.Stringer.
func (e *Emp) String() string {
	var builder strings.Builder
	builder.WriteString("Emp(")
	builder.WriteString(fmt.Sprintf("id=%v", e.ID))
	builder.WriteString(", user=")
	builder.WriteString(e.User)
	builder.WriteString(", pass=")
	builder.WriteString(e.Pass)
	builder.WriteString(", role=")
	builder.WriteString(e.Role)
	builder.WriteByte(')')
	return builder.String()
}

// Emps is a parsable slice of Emp.
type Emps []*Emp

func (e Emps) config(cfg config) {
	for _i := range e {
		e[_i].config = cfg
	}
}
