// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team17/app/ent/course"
	"github.com/sut63/team17/app/ent/degree"
	"github.com/sut63/team17/app/ent/faculty"
	"github.com/sut63/team17/app/ent/institution"
)

// Course is the model entity for the Course schema.
type Course struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Course holds the value of the "course" field.
	Course string `json:"course,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CourseQuery when eager-loading is set.
	Edges                 CourseEdges `json:"edges"`
	degree_degr_cour      *int
	faculty_facu_cour     *int
	institution_inst_cour *int
}

// CourseEdges holds the relations/edges for other nodes in the graph.
type CourseEdges struct {
	// CourFacu holds the value of the cour_facu edge.
	CourFacu *Faculty
	// CourDegr holds the value of the cour_degr edge.
	CourDegr *Degree
	// CourInst holds the value of the cour_inst edge.
	CourInst *Institution
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// CourFacuOrErr returns the CourFacu value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseEdges) CourFacuOrErr() (*Faculty, error) {
	if e.loadedTypes[0] {
		if e.CourFacu == nil {
			// The edge cour_facu was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: faculty.Label}
		}
		return e.CourFacu, nil
	}
	return nil, &NotLoadedError{edge: "cour_facu"}
}

// CourDegrOrErr returns the CourDegr value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseEdges) CourDegrOrErr() (*Degree, error) {
	if e.loadedTypes[1] {
		if e.CourDegr == nil {
			// The edge cour_degr was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: degree.Label}
		}
		return e.CourDegr, nil
	}
	return nil, &NotLoadedError{edge: "cour_degr"}
}

// CourInstOrErr returns the CourInst value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e CourseEdges) CourInstOrErr() (*Institution, error) {
	if e.loadedTypes[2] {
		if e.CourInst == nil {
			// The edge cour_inst was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: institution.Label}
		}
		return e.CourInst, nil
	}
	return nil, &NotLoadedError{edge: "cour_inst"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Course) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // course
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Course) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // degree_degr_cour
		&sql.NullInt64{}, // faculty_facu_cour
		&sql.NullInt64{}, // institution_inst_cour
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Course fields.
func (c *Course) assignValues(values ...interface{}) error {
	if m, n := len(values), len(course.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field course", values[0])
	} else if value.Valid {
		c.Course = value.String
	}
	values = values[1:]
	if len(values) == len(course.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field degree_degr_cour", value)
		} else if value.Valid {
			c.degree_degr_cour = new(int)
			*c.degree_degr_cour = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field faculty_facu_cour", value)
		} else if value.Valid {
			c.faculty_facu_cour = new(int)
			*c.faculty_facu_cour = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field institution_inst_cour", value)
		} else if value.Valid {
			c.institution_inst_cour = new(int)
			*c.institution_inst_cour = int(value.Int64)
		}
	}
	return nil
}

// QueryCourFacu queries the cour_facu edge of the Course.
func (c *Course) QueryCourFacu() *FacultyQuery {
	return (&CourseClient{config: c.config}).QueryCourFacu(c)
}

// QueryCourDegr queries the cour_degr edge of the Course.
func (c *Course) QueryCourDegr() *DegreeQuery {
	return (&CourseClient{config: c.config}).QueryCourDegr(c)
}

// QueryCourInst queries the cour_inst edge of the Course.
func (c *Course) QueryCourInst() *InstitutionQuery {
	return (&CourseClient{config: c.config}).QueryCourInst(c)
}

// Update returns a builder for updating this Course.
// Note that, you need to call Course.Unwrap() before calling this method, if this Course
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Course) Update() *CourseUpdateOne {
	return (&CourseClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Course) Unwrap() *Course {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Course is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Course) String() string {
	var builder strings.Builder
	builder.WriteString("Course(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", course=")
	builder.WriteString(c.Course)
	builder.WriteByte(')')
	return builder.String()
}

// Courses is a parsable slice of Course.
type Courses []*Course

func (c Courses) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
