// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team17/app/ent/postal"
)

// Postal is the model entity for the Postal schema.
type Postal struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Postal holds the value of the "postal" field.
	Postal string `json:"postal,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PostalQuery when eager-loading is set.
	Edges PostalEdges `json:"edges"`
}

// PostalEdges holds the relations/edges for other nodes in the graph.
type PostalEdges struct {
	// PostDist holds the value of the post_dist edge.
	PostDist []*District
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// PostDistOrErr returns the PostDist value or an error if the edge
// was not loaded in eager-loading.
func (e PostalEdges) PostDistOrErr() ([]*District, error) {
	if e.loadedTypes[0] {
		return e.PostDist, nil
	}
	return nil, &NotLoadedError{edge: "post_dist"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Postal) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // postal
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Postal fields.
func (po *Postal) assignValues(values ...interface{}) error {
	if m, n := len(values), len(postal.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	po.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field postal", values[0])
	} else if value.Valid {
		po.Postal = value.String
	}
	return nil
}

// QueryPostDist queries the post_dist edge of the Postal.
func (po *Postal) QueryPostDist() *DistrictQuery {
	return (&PostalClient{config: po.config}).QueryPostDist(po)
}

// Update returns a builder for updating this Postal.
// Note that, you need to call Postal.Unwrap() before calling this method, if this Postal
// was returned from a transaction, and the transaction was committed or rolled back.
func (po *Postal) Update() *PostalUpdateOne {
	return (&PostalClient{config: po.config}).UpdateOne(po)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (po *Postal) Unwrap() *Postal {
	tx, ok := po.config.driver.(*txDriver)
	if !ok {
		panic("ent: Postal is not a transactional entity")
	}
	po.config.driver = tx.drv
	return po
}

// String implements the fmt.Stringer.
func (po *Postal) String() string {
	var builder strings.Builder
	builder.WriteString("Postal(")
	builder.WriteString(fmt.Sprintf("id=%v", po.ID))
	builder.WriteString(", postal=")
	builder.WriteString(po.Postal)
	builder.WriteByte(')')
	return builder.String()
}

// Postals is a parsable slice of Postal.
type Postals []*Postal

func (po Postals) config(cfg config) {
	for _i := range po {
		po[_i].config = cfg
	}
}
