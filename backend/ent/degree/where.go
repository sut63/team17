// Code generated by entc, DO NOT EDIT.

package degree

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team17/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Degree applies equality check predicate on the "degree" field. It's identical to DegreeEQ.
func Degree(v string) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDegree), v))
	})
}

// DegreeEQ applies the EQ predicate on the "degree" field.
func DegreeEQ(v string) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDegree), v))
	})
}

// DegreeNEQ applies the NEQ predicate on the "degree" field.
func DegreeNEQ(v string) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDegree), v))
	})
}

// DegreeIn applies the In predicate on the "degree" field.
func DegreeIn(vs ...string) predicate.Degree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Degree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDegree), v...))
	})
}

// DegreeNotIn applies the NotIn predicate on the "degree" field.
func DegreeNotIn(vs ...string) predicate.Degree {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Degree(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDegree), v...))
	})
}

// DegreeGT applies the GT predicate on the "degree" field.
func DegreeGT(v string) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDegree), v))
	})
}

// DegreeGTE applies the GTE predicate on the "degree" field.
func DegreeGTE(v string) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDegree), v))
	})
}

// DegreeLT applies the LT predicate on the "degree" field.
func DegreeLT(v string) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDegree), v))
	})
}

// DegreeLTE applies the LTE predicate on the "degree" field.
func DegreeLTE(v string) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDegree), v))
	})
}

// DegreeContains applies the Contains predicate on the "degree" field.
func DegreeContains(v string) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDegree), v))
	})
}

// DegreeHasPrefix applies the HasPrefix predicate on the "degree" field.
func DegreeHasPrefix(v string) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDegree), v))
	})
}

// DegreeHasSuffix applies the HasSuffix predicate on the "degree" field.
func DegreeHasSuffix(v string) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDegree), v))
	})
}

// DegreeEqualFold applies the EqualFold predicate on the "degree" field.
func DegreeEqualFold(v string) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDegree), v))
	})
}

// DegreeContainsFold applies the ContainsFold predicate on the "degree" field.
func DegreeContainsFold(v string) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDegree), v))
	})
}

// HasDegrStud applies the HasEdge predicate on the "degr_stud" edge.
func HasDegrStud() predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DegrStudTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DegrStudTable, DegrStudColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDegrStudWith applies the HasEdge predicate on the "degr_stud" edge with a given conditions (other predicates).
func HasDegrStudWith(preds ...predicate.Student) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DegrStudInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DegrStudTable, DegrStudColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasDegrCour applies the HasEdge predicate on the "degr_cour" edge.
func HasDegrCour() predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DegrCourTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DegrCourTable, DegrCourColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasDegrCourWith applies the HasEdge predicate on the "degr_cour" edge with a given conditions (other predicates).
func HasDegrCourWith(preds ...predicate.Course) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(DegrCourInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, DegrCourTable, DegrCourColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Degree) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Degree) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Degree) predicate.Degree {
	return predicate.Degree(func(s *sql.Selector) {
		p(s.Not())
	})
}
