// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/province"
	"github.com/sut63/team17/app/ent/region"
)

// RegionCreate is the builder for creating a Region entity.
type RegionCreate struct {
	config
	mutation *RegionMutation
	hooks    []Hook
}

// SetName sets the name field.
func (rc *RegionCreate) SetName(s string) *RegionCreate {
	rc.mutation.SetName(s)
	return rc
}

// AddRegiProvIDs adds the regi_prov edge to Province by ids.
func (rc *RegionCreate) AddRegiProvIDs(ids ...int) *RegionCreate {
	rc.mutation.AddRegiProvIDs(ids...)
	return rc
}

// AddRegiProv adds the regi_prov edges to Province.
func (rc *RegionCreate) AddRegiProv(p ...*Province) *RegionCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return rc.AddRegiProvIDs(ids...)
}

// Mutation returns the RegionMutation object of the builder.
func (rc *RegionCreate) Mutation() *RegionMutation {
	return rc.mutation
}

// Save creates the Region in the database.
func (rc *RegionCreate) Save(ctx context.Context) (*Region, error) {
	if _, ok := rc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if v, ok := rc.mutation.Name(); ok {
		if err := region.NameValidator(v); err != nil {
			return nil, &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	var (
		err  error
		node *Region
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RegionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RegionCreate) SaveX(ctx context.Context) *Region {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *RegionCreate) sqlSave(ctx context.Context) (*Region, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *RegionCreate) createSpec() (*Region, *sqlgraph.CreateSpec) {
	var (
		r     = &Region{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: region.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: region.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: region.FieldName,
		})
		r.Name = value
	}
	if nodes := rc.mutation.RegiProvIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   region.RegiProvTable,
			Columns: []string{region.RegiProvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
