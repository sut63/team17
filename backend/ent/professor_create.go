// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/faculty"
	"github.com/sut63/team17/app/ent/prefix"
	"github.com/sut63/team17/app/ent/professor"
	"github.com/sut63/team17/app/ent/professorship"
)

// ProfessorCreate is the builder for creating a Professor entity.
type ProfessorCreate struct {
	config
	mutation *ProfessorMutation
	hooks    []Hook
}

// SetName sets the name field.
func (pc *ProfessorCreate) SetName(s string) *ProfessorCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetTel sets the tel field.
func (pc *ProfessorCreate) SetTel(s string) *ProfessorCreate {
	pc.mutation.SetTel(s)
	return pc
}

// SetEmail sets the email field.
func (pc *ProfessorCreate) SetEmail(s string) *ProfessorCreate {
	pc.mutation.SetEmail(s)
	return pc
}

// SetProfPreID sets the prof_pre edge to Prefix by id.
func (pc *ProfessorCreate) SetProfPreID(id int) *ProfessorCreate {
	pc.mutation.SetProfPreID(id)
	return pc
}

// SetNillableProfPreID sets the prof_pre edge to Prefix by id if the given value is not nil.
func (pc *ProfessorCreate) SetNillableProfPreID(id *int) *ProfessorCreate {
	if id != nil {
		pc = pc.SetProfPreID(*id)
	}
	return pc
}

// SetProfPre sets the prof_pre edge to Prefix.
func (pc *ProfessorCreate) SetProfPre(p *Prefix) *ProfessorCreate {
	return pc.SetProfPreID(p.ID)
}

// SetProfFacuID sets the prof_facu edge to Faculty by id.
func (pc *ProfessorCreate) SetProfFacuID(id int) *ProfessorCreate {
	pc.mutation.SetProfFacuID(id)
	return pc
}

// SetNillableProfFacuID sets the prof_facu edge to Faculty by id if the given value is not nil.
func (pc *ProfessorCreate) SetNillableProfFacuID(id *int) *ProfessorCreate {
	if id != nil {
		pc = pc.SetProfFacuID(*id)
	}
	return pc
}

// SetProfFacu sets the prof_facu edge to Faculty.
func (pc *ProfessorCreate) SetProfFacu(f *Faculty) *ProfessorCreate {
	return pc.SetProfFacuID(f.ID)
}

// SetProfProsID sets the prof_pros edge to Professorship by id.
func (pc *ProfessorCreate) SetProfProsID(id int) *ProfessorCreate {
	pc.mutation.SetProfProsID(id)
	return pc
}

// SetNillableProfProsID sets the prof_pros edge to Professorship by id if the given value is not nil.
func (pc *ProfessorCreate) SetNillableProfProsID(id *int) *ProfessorCreate {
	if id != nil {
		pc = pc.SetProfProsID(*id)
	}
	return pc
}

// SetProfPros sets the prof_pros edge to Professorship.
func (pc *ProfessorCreate) SetProfPros(p *Professorship) *ProfessorCreate {
	return pc.SetProfProsID(p.ID)
}

// Mutation returns the ProfessorMutation object of the builder.
func (pc *ProfessorCreate) Mutation() *ProfessorMutation {
	return pc.mutation
}

// Save creates the Professor in the database.
func (pc *ProfessorCreate) Save(ctx context.Context) (*Professor, error) {
	if _, ok := pc.mutation.Name(); !ok {
		return nil, &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := pc.mutation.Tel(); !ok {
		return nil, &ValidationError{Name: "tel", err: errors.New("ent: missing required field \"tel\"")}
	}
	if _, ok := pc.mutation.Email(); !ok {
		return nil, &ValidationError{Name: "email", err: errors.New("ent: missing required field \"email\"")}
	}
	var (
		err  error
		node *Professor
	)
	if len(pc.hooks) == 0 {
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProfessorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pc.mutation = mutation
			node, err = pc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProfessorCreate) SaveX(ctx context.Context) *Professor {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (pc *ProfessorCreate) sqlSave(ctx context.Context) (*Professor, error) {
	pr, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	pr.ID = int(id)
	return pr, nil
}

func (pc *ProfessorCreate) createSpec() (*Professor, *sqlgraph.CreateSpec) {
	var (
		pr    = &Professor{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: professor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: professor.FieldID,
			},
		}
	)
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: professor.FieldName,
		})
		pr.Name = value
	}
	if value, ok := pc.mutation.Tel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: professor.FieldTel,
		})
		pr.Tel = value
	}
	if value, ok := pc.mutation.Email(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: professor.FieldEmail,
		})
		pr.Email = value
	}
	if nodes := pc.mutation.ProfPreIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   professor.ProfPreTable,
			Columns: []string{professor.ProfPreColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProfFacuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   professor.ProfFacuTable,
			Columns: []string{professor.ProfFacuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: faculty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.ProfProsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   professor.ProfProsTable,
			Columns: []string{professor.ProfProsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: professorship.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return pr, _spec
}
