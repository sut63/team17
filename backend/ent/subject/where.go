// Code generated by entc, DO NOT EDIT.

package subject

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/sut63/team17/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// Subjects applies equality check predicate on the "subjects" field. It's identical to SubjectsEQ.
func Subjects(v string) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjects), v))
	})
}

// Creditpiont applies equality check predicate on the "creditpiont" field. It's identical to CreditpiontEQ.
func Creditpiont(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreditpiont), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...int) predicate.Subject {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subject(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...int) predicate.Subject {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subject(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// SubjectsEQ applies the EQ predicate on the "subjects" field.
func SubjectsEQ(v string) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjects), v))
	})
}

// SubjectsNEQ applies the NEQ predicate on the "subjects" field.
func SubjectsNEQ(v string) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubjects), v))
	})
}

// SubjectsIn applies the In predicate on the "subjects" field.
func SubjectsIn(vs ...string) predicate.Subject {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subject(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubjects), v...))
	})
}

// SubjectsNotIn applies the NotIn predicate on the "subjects" field.
func SubjectsNotIn(vs ...string) predicate.Subject {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subject(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubjects), v...))
	})
}

// SubjectsGT applies the GT predicate on the "subjects" field.
func SubjectsGT(v string) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubjects), v))
	})
}

// SubjectsGTE applies the GTE predicate on the "subjects" field.
func SubjectsGTE(v string) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubjects), v))
	})
}

// SubjectsLT applies the LT predicate on the "subjects" field.
func SubjectsLT(v string) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubjects), v))
	})
}

// SubjectsLTE applies the LTE predicate on the "subjects" field.
func SubjectsLTE(v string) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubjects), v))
	})
}

// SubjectsContains applies the Contains predicate on the "subjects" field.
func SubjectsContains(v string) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSubjects), v))
	})
}

// SubjectsHasPrefix applies the HasPrefix predicate on the "subjects" field.
func SubjectsHasPrefix(v string) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSubjects), v))
	})
}

// SubjectsHasSuffix applies the HasSuffix predicate on the "subjects" field.
func SubjectsHasSuffix(v string) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSubjects), v))
	})
}

// SubjectsEqualFold applies the EqualFold predicate on the "subjects" field.
func SubjectsEqualFold(v string) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSubjects), v))
	})
}

// SubjectsContainsFold applies the ContainsFold predicate on the "subjects" field.
func SubjectsContainsFold(v string) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSubjects), v))
	})
}

// CreditpiontEQ applies the EQ predicate on the "creditpiont" field.
func CreditpiontEQ(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreditpiont), v))
	})
}

// CreditpiontNEQ applies the NEQ predicate on the "creditpiont" field.
func CreditpiontNEQ(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreditpiont), v))
	})
}

// CreditpiontIn applies the In predicate on the "creditpiont" field.
func CreditpiontIn(vs ...int) predicate.Subject {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subject(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreditpiont), v...))
	})
}

// CreditpiontNotIn applies the NotIn predicate on the "creditpiont" field.
func CreditpiontNotIn(vs ...int) predicate.Subject {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Subject(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreditpiont), v...))
	})
}

// CreditpiontGT applies the GT predicate on the "creditpiont" field.
func CreditpiontGT(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreditpiont), v))
	})
}

// CreditpiontGTE applies the GTE predicate on the "creditpiont" field.
func CreditpiontGTE(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreditpiont), v))
	})
}

// CreditpiontLT applies the LT predicate on the "creditpiont" field.
func CreditpiontLT(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreditpiont), v))
	})
}

// CreditpiontLTE applies the LTE predicate on the "creditpiont" field.
func CreditpiontLTE(v int) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreditpiont), v))
	})
}

// HasSubjResu applies the HasEdge predicate on the "subj_resu" edge.
func HasSubjResu() predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubjResuTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubjResuTable, SubjResuColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasSubjResuWith applies the HasEdge predicate on the "subj_resu" edge with a given conditions (other predicates).
func HasSubjResuWith(preds ...predicate.Results) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(SubjResuInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, SubjResuTable, SubjResuColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Subject) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Subject) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Subject) predicate.Subject {
	return predicate.Subject(func(s *sql.Selector) {
		p(s.Not())
	})
}
