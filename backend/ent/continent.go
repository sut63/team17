// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team17/app/ent/continent"
)

// Continent is the model entity for the Continent schema.
type Continent struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Continent holds the value of the "continent" field.
	Continent string `json:"continent,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ContinentQuery when eager-loading is set.
	Edges ContinentEdges `json:"edges"`
}

// ContinentEdges holds the relations/edges for other nodes in the graph.
type ContinentEdges struct {
	// ContProv holds the value of the cont_prov edge.
	ContProv []*Province
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// ContProvOrErr returns the ContProv value or an error if the edge
// was not loaded in eager-loading.
func (e ContinentEdges) ContProvOrErr() ([]*Province, error) {
	if e.loadedTypes[0] {
		return e.ContProv, nil
	}
	return nil, &NotLoadedError{edge: "cont_prov"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Continent) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // continent
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Continent fields.
func (c *Continent) assignValues(values ...interface{}) error {
	if m, n := len(values), len(continent.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	c.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field continent", values[0])
	} else if value.Valid {
		c.Continent = value.String
	}
	return nil
}

// QueryContProv queries the cont_prov edge of the Continent.
func (c *Continent) QueryContProv() *ProvinceQuery {
	return (&ContinentClient{config: c.config}).QueryContProv(c)
}

// Update returns a builder for updating this Continent.
// Note that, you need to call Continent.Unwrap() before calling this method, if this Continent
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Continent) Update() *ContinentUpdateOne {
	return (&ContinentClient{config: c.config}).UpdateOne(c)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (c *Continent) Unwrap() *Continent {
	tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Continent is not a transactional entity")
	}
	c.config.driver = tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Continent) String() string {
	var builder strings.Builder
	builder.WriteString("Continent(")
	builder.WriteString(fmt.Sprintf("id=%v", c.ID))
	builder.WriteString(", continent=")
	builder.WriteString(c.Continent)
	builder.WriteByte(')')
	return builder.String()
}

// Continents is a parsable slice of Continent.
type Continents []*Continent

func (c Continents) config(cfg config) {
	for _i := range c {
		c[_i].config = cfg
	}
}
