// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/emp"
	"github.com/sut63/team17/app/ent/predicate"
)

// EmpUpdate is the builder for updating Emp entities.
type EmpUpdate struct {
	config
	hooks      []Hook
	mutation   *EmpMutation
	predicates []predicate.Emp
}

// Where adds a new predicate for the builder.
func (eu *EmpUpdate) Where(ps ...predicate.Emp) *EmpUpdate {
	eu.predicates = append(eu.predicates, ps...)
	return eu
}

// SetUser sets the user field.
func (eu *EmpUpdate) SetUser(s string) *EmpUpdate {
	eu.mutation.SetUser(s)
	return eu
}

// SetPass sets the pass field.
func (eu *EmpUpdate) SetPass(s string) *EmpUpdate {
	eu.mutation.SetPass(s)
	return eu
}

// SetRole sets the role field.
func (eu *EmpUpdate) SetRole(s string) *EmpUpdate {
	eu.mutation.SetRole(s)
	return eu
}

// Mutation returns the EmpMutation object of the builder.
func (eu *EmpUpdate) Mutation() *EmpMutation {
	return eu.mutation
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (eu *EmpUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := eu.mutation.User(); ok {
		if err := emp.UserValidator(v); err != nil {
			return 0, &ValidationError{Name: "user", err: fmt.Errorf("ent: validator failed for field \"user\": %w", err)}
		}
	}
	if v, ok := eu.mutation.Pass(); ok {
		if err := emp.PassValidator(v); err != nil {
			return 0, &ValidationError{Name: "pass", err: fmt.Errorf("ent: validator failed for field \"pass\": %w", err)}
		}
	}
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmpMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *EmpUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *EmpUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *EmpUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (eu *EmpUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emp.Table,
			Columns: emp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: emp.FieldID,
			},
		},
	}
	if ps := eu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emp.FieldUser,
		})
	}
	if value, ok := eu.mutation.Pass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emp.FieldPass,
		})
	}
	if value, ok := eu.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emp.FieldRole,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emp.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// EmpUpdateOne is the builder for updating a single Emp entity.
type EmpUpdateOne struct {
	config
	hooks    []Hook
	mutation *EmpMutation
}

// SetUser sets the user field.
func (euo *EmpUpdateOne) SetUser(s string) *EmpUpdateOne {
	euo.mutation.SetUser(s)
	return euo
}

// SetPass sets the pass field.
func (euo *EmpUpdateOne) SetPass(s string) *EmpUpdateOne {
	euo.mutation.SetPass(s)
	return euo
}

// SetRole sets the role field.
func (euo *EmpUpdateOne) SetRole(s string) *EmpUpdateOne {
	euo.mutation.SetRole(s)
	return euo
}

// Mutation returns the EmpMutation object of the builder.
func (euo *EmpUpdateOne) Mutation() *EmpMutation {
	return euo.mutation
}

// Save executes the query and returns the updated entity.
func (euo *EmpUpdateOne) Save(ctx context.Context) (*Emp, error) {
	if v, ok := euo.mutation.User(); ok {
		if err := emp.UserValidator(v); err != nil {
			return nil, &ValidationError{Name: "user", err: fmt.Errorf("ent: validator failed for field \"user\": %w", err)}
		}
	}
	if v, ok := euo.mutation.Pass(); ok {
		if err := emp.PassValidator(v); err != nil {
			return nil, &ValidationError{Name: "pass", err: fmt.Errorf("ent: validator failed for field \"pass\": %w", err)}
		}
	}
	var (
		err  error
		node *Emp
	)
	if len(euo.hooks) == 0 {
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*EmpMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			mut = euo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, euo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *EmpUpdateOne) SaveX(ctx context.Context) *Emp {
	e, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return e
}

// Exec executes the query on the entity.
func (euo *EmpUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *EmpUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (euo *EmpUpdateOne) sqlSave(ctx context.Context) (e *Emp, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   emp.Table,
			Columns: emp.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: emp.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Emp.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := euo.mutation.User(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emp.FieldUser,
		})
	}
	if value, ok := euo.mutation.Pass(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emp.FieldPass,
		})
	}
	if value, ok := euo.mutation.Role(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: emp.FieldRole,
		})
	}
	e = &Emp{config: euo.config}
	_spec.Assign = e.assignValues
	_spec.ScanValues = e.scanValues()
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emp.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return e, nil
}
