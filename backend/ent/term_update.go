// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/activity"
	"github.com/sut63/team17/app/ent/predicate"
	"github.com/sut63/team17/app/ent/results"
	"github.com/sut63/team17/app/ent/term"
)

// TermUpdate is the builder for updating Term entities.
type TermUpdate struct {
	config
	hooks      []Hook
	mutation   *TermMutation
	predicates []predicate.Term
}

// Where adds a new predicate for the builder.
func (tu *TermUpdate) Where(ps ...predicate.Term) *TermUpdate {
	tu.predicates = append(tu.predicates, ps...)
	return tu
}

// SetSemester sets the semester field.
func (tu *TermUpdate) SetSemester(i int) *TermUpdate {
	tu.mutation.ResetSemester()
	tu.mutation.SetSemester(i)
	return tu
}

// AddSemester adds i to semester.
func (tu *TermUpdate) AddSemester(i int) *TermUpdate {
	tu.mutation.AddSemester(i)
	return tu
}

// AddTermResuIDs adds the term_resu edge to Results by ids.
func (tu *TermUpdate) AddTermResuIDs(ids ...int) *TermUpdate {
	tu.mutation.AddTermResuIDs(ids...)
	return tu
}

// AddTermResu adds the term_resu edges to Results.
func (tu *TermUpdate) AddTermResu(r ...*Results) *TermUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.AddTermResuIDs(ids...)
}

// AddTermActiIDs adds the term_acti edge to Activity by ids.
func (tu *TermUpdate) AddTermActiIDs(ids ...int) *TermUpdate {
	tu.mutation.AddTermActiIDs(ids...)
	return tu
}

// AddTermActi adds the term_acti edges to Activity.
func (tu *TermUpdate) AddTermActi(a ...*Activity) *TermUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddTermActiIDs(ids...)
}

// Mutation returns the TermMutation object of the builder.
func (tu *TermUpdate) Mutation() *TermMutation {
	return tu.mutation
}

// RemoveTermResuIDs removes the term_resu edge to Results by ids.
func (tu *TermUpdate) RemoveTermResuIDs(ids ...int) *TermUpdate {
	tu.mutation.RemoveTermResuIDs(ids...)
	return tu
}

// RemoveTermResu removes term_resu edges to Results.
func (tu *TermUpdate) RemoveTermResu(r ...*Results) *TermUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tu.RemoveTermResuIDs(ids...)
}

// RemoveTermActiIDs removes the term_acti edge to Activity by ids.
func (tu *TermUpdate) RemoveTermActiIDs(ids ...int) *TermUpdate {
	tu.mutation.RemoveTermActiIDs(ids...)
	return tu
}

// RemoveTermActi removes term_acti edges to Activity.
func (tu *TermUpdate) RemoveTermActi(a ...*Activity) *TermUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveTermActiIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (tu *TermUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := tu.mutation.Semester(); ok {
		if err := term.SemesterValidator(v); err != nil {
			return 0, &ValidationError{Name: "semester", err: fmt.Errorf("ent: validator failed for field \"semester\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TermMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TermUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TermUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TermUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TermUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   term.Table,
			Columns: term.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: term.FieldID,
			},
		},
	}
	if ps := tu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Semester(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: term.FieldSemester,
		})
	}
	if value, ok := tu.mutation.AddedSemester(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: term.FieldSemester,
		})
	}
	if nodes := tu.mutation.RemovedTermResuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   term.TermResuTable,
			Columns: []string{term.TermResuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: results.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TermResuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   term.TermResuTable,
			Columns: []string{term.TermResuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: results.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := tu.mutation.RemovedTermActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   term.TermActiTable,
			Columns: []string{term.TermActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TermActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   term.TermActiTable,
			Columns: []string{term.TermActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{term.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// TermUpdateOne is the builder for updating a single Term entity.
type TermUpdateOne struct {
	config
	hooks    []Hook
	mutation *TermMutation
}

// SetSemester sets the semester field.
func (tuo *TermUpdateOne) SetSemester(i int) *TermUpdateOne {
	tuo.mutation.ResetSemester()
	tuo.mutation.SetSemester(i)
	return tuo
}

// AddSemester adds i to semester.
func (tuo *TermUpdateOne) AddSemester(i int) *TermUpdateOne {
	tuo.mutation.AddSemester(i)
	return tuo
}

// AddTermResuIDs adds the term_resu edge to Results by ids.
func (tuo *TermUpdateOne) AddTermResuIDs(ids ...int) *TermUpdateOne {
	tuo.mutation.AddTermResuIDs(ids...)
	return tuo
}

// AddTermResu adds the term_resu edges to Results.
func (tuo *TermUpdateOne) AddTermResu(r ...*Results) *TermUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.AddTermResuIDs(ids...)
}

// AddTermActiIDs adds the term_acti edge to Activity by ids.
func (tuo *TermUpdateOne) AddTermActiIDs(ids ...int) *TermUpdateOne {
	tuo.mutation.AddTermActiIDs(ids...)
	return tuo
}

// AddTermActi adds the term_acti edges to Activity.
func (tuo *TermUpdateOne) AddTermActi(a ...*Activity) *TermUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddTermActiIDs(ids...)
}

// Mutation returns the TermMutation object of the builder.
func (tuo *TermUpdateOne) Mutation() *TermMutation {
	return tuo.mutation
}

// RemoveTermResuIDs removes the term_resu edge to Results by ids.
func (tuo *TermUpdateOne) RemoveTermResuIDs(ids ...int) *TermUpdateOne {
	tuo.mutation.RemoveTermResuIDs(ids...)
	return tuo
}

// RemoveTermResu removes term_resu edges to Results.
func (tuo *TermUpdateOne) RemoveTermResu(r ...*Results) *TermUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return tuo.RemoveTermResuIDs(ids...)
}

// RemoveTermActiIDs removes the term_acti edge to Activity by ids.
func (tuo *TermUpdateOne) RemoveTermActiIDs(ids ...int) *TermUpdateOne {
	tuo.mutation.RemoveTermActiIDs(ids...)
	return tuo
}

// RemoveTermActi removes term_acti edges to Activity.
func (tuo *TermUpdateOne) RemoveTermActi(a ...*Activity) *TermUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveTermActiIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (tuo *TermUpdateOne) Save(ctx context.Context) (*Term, error) {
	if v, ok := tuo.mutation.Semester(); ok {
		if err := term.SemesterValidator(v); err != nil {
			return nil, &ValidationError{Name: "semester", err: fmt.Errorf("ent: validator failed for field \"semester\": %w", err)}
		}
	}

	var (
		err  error
		node *Term
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TermMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TermUpdateOne) SaveX(ctx context.Context) *Term {
	t, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return t
}

// Exec executes the query on the entity.
func (tuo *TermUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TermUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TermUpdateOne) sqlSave(ctx context.Context) (t *Term, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   term.Table,
			Columns: term.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: term.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Term.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := tuo.mutation.Semester(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: term.FieldSemester,
		})
	}
	if value, ok := tuo.mutation.AddedSemester(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: term.FieldSemester,
		})
	}
	if nodes := tuo.mutation.RemovedTermResuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   term.TermResuTable,
			Columns: []string{term.TermResuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: results.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TermResuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   term.TermResuTable,
			Columns: []string{term.TermResuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: results.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := tuo.mutation.RemovedTermActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   term.TermActiTable,
			Columns: []string{term.TermActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TermActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   term.TermActiTable,
			Columns: []string{term.TermActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	t = &Term{config: tuo.config}
	_spec.Assign = t.assignValues
	_spec.ScanValues = t.scanValues()
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{term.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return t, nil
}
