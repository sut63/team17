// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/course"
	"github.com/sut63/team17/app/ent/degree"
	"github.com/sut63/team17/app/ent/faculty"
	"github.com/sut63/team17/app/ent/institution"
	"github.com/sut63/team17/app/ent/predicate"
)

// CourseUpdate is the builder for updating Course entities.
type CourseUpdate struct {
	config
	hooks      []Hook
	mutation   *CourseMutation
	predicates []predicate.Course
}

// Where adds a new predicate for the builder.
func (cu *CourseUpdate) Where(ps ...predicate.Course) *CourseUpdate {
	cu.predicates = append(cu.predicates, ps...)
	return cu
}

// SetCourse sets the course field.
func (cu *CourseUpdate) SetCourse(s string) *CourseUpdate {
	cu.mutation.SetCourse(s)
	return cu
}

// SetCourFacuID sets the cour_facu edge to Faculty by id.
func (cu *CourseUpdate) SetCourFacuID(id int) *CourseUpdate {
	cu.mutation.SetCourFacuID(id)
	return cu
}

// SetNillableCourFacuID sets the cour_facu edge to Faculty by id if the given value is not nil.
func (cu *CourseUpdate) SetNillableCourFacuID(id *int) *CourseUpdate {
	if id != nil {
		cu = cu.SetCourFacuID(*id)
	}
	return cu
}

// SetCourFacu sets the cour_facu edge to Faculty.
func (cu *CourseUpdate) SetCourFacu(f *Faculty) *CourseUpdate {
	return cu.SetCourFacuID(f.ID)
}

// SetCourDegrID sets the cour_degr edge to Degree by id.
func (cu *CourseUpdate) SetCourDegrID(id int) *CourseUpdate {
	cu.mutation.SetCourDegrID(id)
	return cu
}

// SetNillableCourDegrID sets the cour_degr edge to Degree by id if the given value is not nil.
func (cu *CourseUpdate) SetNillableCourDegrID(id *int) *CourseUpdate {
	if id != nil {
		cu = cu.SetCourDegrID(*id)
	}
	return cu
}

// SetCourDegr sets the cour_degr edge to Degree.
func (cu *CourseUpdate) SetCourDegr(d *Degree) *CourseUpdate {
	return cu.SetCourDegrID(d.ID)
}

// SetCourInstID sets the cour_inst edge to Institution by id.
func (cu *CourseUpdate) SetCourInstID(id int) *CourseUpdate {
	cu.mutation.SetCourInstID(id)
	return cu
}

// SetNillableCourInstID sets the cour_inst edge to Institution by id if the given value is not nil.
func (cu *CourseUpdate) SetNillableCourInstID(id *int) *CourseUpdate {
	if id != nil {
		cu = cu.SetCourInstID(*id)
	}
	return cu
}

// SetCourInst sets the cour_inst edge to Institution.
func (cu *CourseUpdate) SetCourInst(i *Institution) *CourseUpdate {
	return cu.SetCourInstID(i.ID)
}

// Mutation returns the CourseMutation object of the builder.
func (cu *CourseUpdate) Mutation() *CourseMutation {
	return cu.mutation
}

// ClearCourFacu clears the cour_facu edge to Faculty.
func (cu *CourseUpdate) ClearCourFacu() *CourseUpdate {
	cu.mutation.ClearCourFacu()
	return cu
}

// ClearCourDegr clears the cour_degr edge to Degree.
func (cu *CourseUpdate) ClearCourDegr() *CourseUpdate {
	cu.mutation.ClearCourDegr()
	return cu
}

// ClearCourInst clears the cour_inst edge to Institution.
func (cu *CourseUpdate) ClearCourInst() *CourseUpdate {
	cu.mutation.ClearCourInst()
	return cu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (cu *CourseUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := cu.mutation.Course(); ok {
		if err := course.CourseValidator(v); err != nil {
			return 0, &ValidationError{Name: "course", err: fmt.Errorf("ent: validator failed for field \"course\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(cu.hooks) == 0 {
		affected, err = cu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cu.mutation = mutation
			affected, err = cu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cu.hooks) - 1; i >= 0; i-- {
			mut = cu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CourseUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CourseUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CourseUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cu *CourseUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   course.Table,
			Columns: course.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: course.FieldID,
			},
		},
	}
	if ps := cu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.Course(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldCourse,
		})
	}
	if cu.mutation.CourFacuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CourFacuTable,
			Columns: []string{course.CourFacuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: faculty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourFacuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CourFacuTable,
			Columns: []string{course.CourFacuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: faculty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CourDegrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CourDegrTable,
			Columns: []string{course.CourDegrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourDegrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CourDegrTable,
			Columns: []string{course.CourDegrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cu.mutation.CourInstCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CourInstTable,
			Columns: []string{course.CourInstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: institution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.CourInstIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CourInstTable,
			Columns: []string{course.CourInstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: institution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// CourseUpdateOne is the builder for updating a single Course entity.
type CourseUpdateOne struct {
	config
	hooks    []Hook
	mutation *CourseMutation
}

// SetCourse sets the course field.
func (cuo *CourseUpdateOne) SetCourse(s string) *CourseUpdateOne {
	cuo.mutation.SetCourse(s)
	return cuo
}

// SetCourFacuID sets the cour_facu edge to Faculty by id.
func (cuo *CourseUpdateOne) SetCourFacuID(id int) *CourseUpdateOne {
	cuo.mutation.SetCourFacuID(id)
	return cuo
}

// SetNillableCourFacuID sets the cour_facu edge to Faculty by id if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableCourFacuID(id *int) *CourseUpdateOne {
	if id != nil {
		cuo = cuo.SetCourFacuID(*id)
	}
	return cuo
}

// SetCourFacu sets the cour_facu edge to Faculty.
func (cuo *CourseUpdateOne) SetCourFacu(f *Faculty) *CourseUpdateOne {
	return cuo.SetCourFacuID(f.ID)
}

// SetCourDegrID sets the cour_degr edge to Degree by id.
func (cuo *CourseUpdateOne) SetCourDegrID(id int) *CourseUpdateOne {
	cuo.mutation.SetCourDegrID(id)
	return cuo
}

// SetNillableCourDegrID sets the cour_degr edge to Degree by id if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableCourDegrID(id *int) *CourseUpdateOne {
	if id != nil {
		cuo = cuo.SetCourDegrID(*id)
	}
	return cuo
}

// SetCourDegr sets the cour_degr edge to Degree.
func (cuo *CourseUpdateOne) SetCourDegr(d *Degree) *CourseUpdateOne {
	return cuo.SetCourDegrID(d.ID)
}

// SetCourInstID sets the cour_inst edge to Institution by id.
func (cuo *CourseUpdateOne) SetCourInstID(id int) *CourseUpdateOne {
	cuo.mutation.SetCourInstID(id)
	return cuo
}

// SetNillableCourInstID sets the cour_inst edge to Institution by id if the given value is not nil.
func (cuo *CourseUpdateOne) SetNillableCourInstID(id *int) *CourseUpdateOne {
	if id != nil {
		cuo = cuo.SetCourInstID(*id)
	}
	return cuo
}

// SetCourInst sets the cour_inst edge to Institution.
func (cuo *CourseUpdateOne) SetCourInst(i *Institution) *CourseUpdateOne {
	return cuo.SetCourInstID(i.ID)
}

// Mutation returns the CourseMutation object of the builder.
func (cuo *CourseUpdateOne) Mutation() *CourseMutation {
	return cuo.mutation
}

// ClearCourFacu clears the cour_facu edge to Faculty.
func (cuo *CourseUpdateOne) ClearCourFacu() *CourseUpdateOne {
	cuo.mutation.ClearCourFacu()
	return cuo
}

// ClearCourDegr clears the cour_degr edge to Degree.
func (cuo *CourseUpdateOne) ClearCourDegr() *CourseUpdateOne {
	cuo.mutation.ClearCourDegr()
	return cuo
}

// ClearCourInst clears the cour_inst edge to Institution.
func (cuo *CourseUpdateOne) ClearCourInst() *CourseUpdateOne {
	cuo.mutation.ClearCourInst()
	return cuo
}

// Save executes the query and returns the updated entity.
func (cuo *CourseUpdateOne) Save(ctx context.Context) (*Course, error) {
	if v, ok := cuo.mutation.Course(); ok {
		if err := course.CourseValidator(v); err != nil {
			return nil, &ValidationError{Name: "course", err: fmt.Errorf("ent: validator failed for field \"course\": %w", err)}
		}
	}

	var (
		err  error
		node *Course
	)
	if len(cuo.hooks) == 0 {
		node, err = cuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CourseMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			cuo.mutation = mutation
			node, err = cuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cuo.hooks) - 1; i >= 0; i-- {
			mut = cuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CourseUpdateOne) SaveX(ctx context.Context) *Course {
	c, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return c
}

// Exec executes the query on the entity.
func (cuo *CourseUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CourseUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cuo *CourseUpdateOne) sqlSave(ctx context.Context) (c *Course, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   course.Table,
			Columns: course.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: course.FieldID,
			},
		},
	}
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Course.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := cuo.mutation.Course(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: course.FieldCourse,
		})
	}
	if cuo.mutation.CourFacuCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CourFacuTable,
			Columns: []string{course.CourFacuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: faculty.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourFacuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CourFacuTable,
			Columns: []string{course.CourFacuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: faculty.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CourDegrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CourDegrTable,
			Columns: []string{course.CourDegrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourDegrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CourDegrTable,
			Columns: []string{course.CourDegrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if cuo.mutation.CourInstCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CourInstTable,
			Columns: []string{course.CourInstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: institution.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.CourInstIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   course.CourInstTable,
			Columns: []string{course.CourInstColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: institution.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	c = &Course{config: cuo.config}
	_spec.Assign = c.assignValues
	_spec.ScanValues = c.scanValues()
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{course.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return c, nil
}
