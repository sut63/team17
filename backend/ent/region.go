// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team17/app/ent/region"
)

// Region is the model entity for the Region schema.
type Region struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RegionQuery when eager-loading is set.
	Edges RegionEdges `json:"edges"`
}

// RegionEdges holds the relations/edges for other nodes in the graph.
type RegionEdges struct {
	// RegiProv holds the value of the regi_prov edge.
	RegiProv []*Province
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RegiProvOrErr returns the RegiProv value or an error if the edge
// was not loaded in eager-loading.
func (e RegionEdges) RegiProvOrErr() ([]*Province, error) {
	if e.loadedTypes[0] {
		return e.RegiProv, nil
	}
	return nil, &NotLoadedError{edge: "regi_prov"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Region) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Region fields.
func (r *Region) assignValues(values ...interface{}) error {
	if m, n := len(values), len(region.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	r.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		r.Name = value.String
	}
	return nil
}

// QueryRegiProv queries the regi_prov edge of the Region.
func (r *Region) QueryRegiProv() *ProvinceQuery {
	return (&RegionClient{config: r.config}).QueryRegiProv(r)
}

// Update returns a builder for updating this Region.
// Note that, you need to call Region.Unwrap() before calling this method, if this Region
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Region) Update() *RegionUpdateOne {
	return (&RegionClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (r *Region) Unwrap() *Region {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Region is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Region) String() string {
	var builder strings.Builder
	builder.WriteString("Region(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Regions is a parsable slice of Region.
type Regions []*Region

func (r Regions) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
