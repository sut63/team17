// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/activity"
	"github.com/sut63/team17/app/ent/place"
	"github.com/sut63/team17/app/ent/predicate"
)

// PlaceUpdate is the builder for updating Place entities.
type PlaceUpdate struct {
	config
	hooks      []Hook
	mutation   *PlaceMutation
	predicates []predicate.Place
}

// Where adds a new predicate for the builder.
func (pu *PlaceUpdate) Where(ps ...predicate.Place) *PlaceUpdate {
	pu.predicates = append(pu.predicates, ps...)
	return pu
}

// SetPLACE sets the PLACE field.
func (pu *PlaceUpdate) SetPLACE(s string) *PlaceUpdate {
	pu.mutation.SetPLACE(s)
	return pu
}

// AddPlaceActiIDs adds the place_acti edge to Activity by ids.
func (pu *PlaceUpdate) AddPlaceActiIDs(ids ...int) *PlaceUpdate {
	pu.mutation.AddPlaceActiIDs(ids...)
	return pu
}

// AddPlaceActi adds the place_acti edges to Activity.
func (pu *PlaceUpdate) AddPlaceActi(a ...*Activity) *PlaceUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.AddPlaceActiIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (pu *PlaceUpdate) Mutation() *PlaceMutation {
	return pu.mutation
}

// RemovePlaceActiIDs removes the place_acti edge to Activity by ids.
func (pu *PlaceUpdate) RemovePlaceActiIDs(ids ...int) *PlaceUpdate {
	pu.mutation.RemovePlaceActiIDs(ids...)
	return pu
}

// RemovePlaceActi removes place_acti edges to Activity.
func (pu *PlaceUpdate) RemovePlaceActi(a ...*Activity) *PlaceUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return pu.RemovePlaceActiIDs(ids...)
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (pu *PlaceUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := pu.mutation.PLACE(); ok {
		if err := place.PLACEValidator(v); err != nil {
			return 0, &ValidationError{Name: "PLACE", err: fmt.Errorf("ent: validator failed for field \"PLACE\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PlaceUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PlaceUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PlaceUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pu *PlaceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   place.Table,
			Columns: place.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: place.FieldID,
			},
		},
	}
	if ps := pu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.PLACE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldPLACE,
		})
	}
	if nodes := pu.mutation.RemovedPlaceActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.PlaceActiTable,
			Columns: []string{place.PlaceActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pu.mutation.PlaceActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.PlaceActiTable,
			Columns: []string{place.PlaceActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{place.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// PlaceUpdateOne is the builder for updating a single Place entity.
type PlaceUpdateOne struct {
	config
	hooks    []Hook
	mutation *PlaceMutation
}

// SetPLACE sets the PLACE field.
func (puo *PlaceUpdateOne) SetPLACE(s string) *PlaceUpdateOne {
	puo.mutation.SetPLACE(s)
	return puo
}

// AddPlaceActiIDs adds the place_acti edge to Activity by ids.
func (puo *PlaceUpdateOne) AddPlaceActiIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.AddPlaceActiIDs(ids...)
	return puo
}

// AddPlaceActi adds the place_acti edges to Activity.
func (puo *PlaceUpdateOne) AddPlaceActi(a ...*Activity) *PlaceUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.AddPlaceActiIDs(ids...)
}

// Mutation returns the PlaceMutation object of the builder.
func (puo *PlaceUpdateOne) Mutation() *PlaceMutation {
	return puo.mutation
}

// RemovePlaceActiIDs removes the place_acti edge to Activity by ids.
func (puo *PlaceUpdateOne) RemovePlaceActiIDs(ids ...int) *PlaceUpdateOne {
	puo.mutation.RemovePlaceActiIDs(ids...)
	return puo
}

// RemovePlaceActi removes place_acti edges to Activity.
func (puo *PlaceUpdateOne) RemovePlaceActi(a ...*Activity) *PlaceUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return puo.RemovePlaceActiIDs(ids...)
}

// Save executes the query and returns the updated entity.
func (puo *PlaceUpdateOne) Save(ctx context.Context) (*Place, error) {
	if v, ok := puo.mutation.PLACE(); ok {
		if err := place.PLACEValidator(v); err != nil {
			return nil, &ValidationError{Name: "PLACE", err: fmt.Errorf("ent: validator failed for field \"PLACE\": %w", err)}
		}
	}

	var (
		err  error
		node *Place
	)
	if len(puo.hooks) == 0 {
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlaceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PlaceUpdateOne) SaveX(ctx context.Context) *Place {
	pl, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return pl
}

// Exec executes the query on the entity.
func (puo *PlaceUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PlaceUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (puo *PlaceUpdateOne) sqlSave(ctx context.Context) (pl *Place, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   place.Table,
			Columns: place.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: place.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Place.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := puo.mutation.PLACE(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: place.FieldPLACE,
		})
	}
	if nodes := puo.mutation.RemovedPlaceActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.PlaceActiTable,
			Columns: []string{place.PlaceActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := puo.mutation.PlaceActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   place.PlaceActiTable,
			Columns: []string{place.PlaceActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	pl = &Place{config: puo.config}
	_spec.Assign = pl.assignValues
	_spec.ScanValues = pl.scanValues()
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{place.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return pl, nil
}
