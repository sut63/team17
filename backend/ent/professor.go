// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/sut63/team17/app/ent/faculty"
	"github.com/sut63/team17/app/ent/prefix"
	"github.com/sut63/team17/app/ent/professor"
	"github.com/sut63/team17/app/ent/professorship"
)

// Professor is the model entity for the Professor schema.
type Professor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Tel holds the value of the "tel" field.
	Tel string `json:"tel,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfessorQuery when eager-loading is set.
	Edges             ProfessorEdges `json:"edges"`
	faculty_facu_prof *int
	prefix_ID         *int
	professorship_ID  *int
}

// ProfessorEdges holds the relations/edges for other nodes in the graph.
type ProfessorEdges struct {
	// ProfPre holds the value of the prof_pre edge.
	ProfPre *Prefix
	// ProfFacu holds the value of the prof_facu edge.
	ProfFacu *Faculty
	// ProfPros holds the value of the prof_pros edge.
	ProfPros *Professorship
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// ProfPreOrErr returns the ProfPre value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfessorEdges) ProfPreOrErr() (*Prefix, error) {
	if e.loadedTypes[0] {
		if e.ProfPre == nil {
			// The edge prof_pre was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: prefix.Label}
		}
		return e.ProfPre, nil
	}
	return nil, &NotLoadedError{edge: "prof_pre"}
}

// ProfFacuOrErr returns the ProfFacu value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfessorEdges) ProfFacuOrErr() (*Faculty, error) {
	if e.loadedTypes[1] {
		if e.ProfFacu == nil {
			// The edge prof_facu was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: faculty.Label}
		}
		return e.ProfFacu, nil
	}
	return nil, &NotLoadedError{edge: "prof_facu"}
}

// ProfProsOrErr returns the ProfPros value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfessorEdges) ProfProsOrErr() (*Professorship, error) {
	if e.loadedTypes[2] {
		if e.ProfPros == nil {
			// The edge prof_pros was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: professorship.Label}
		}
		return e.ProfPros, nil
	}
	return nil, &NotLoadedError{edge: "prof_pros"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Professor) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullString{}, // name
		&sql.NullString{}, // tel
		&sql.NullString{}, // email
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Professor) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // faculty_facu_prof
		&sql.NullInt64{}, // prefix_ID
		&sql.NullInt64{}, // professorship_ID
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Professor fields.
func (pr *Professor) assignValues(values ...interface{}) error {
	if m, n := len(values), len(professor.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	pr.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[0])
	} else if value.Valid {
		pr.Name = value.String
	}
	if value, ok := values[1].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field tel", values[1])
	} else if value.Valid {
		pr.Tel = value.String
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field email", values[2])
	} else if value.Valid {
		pr.Email = value.String
	}
	values = values[3:]
	if len(values) == len(professor.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field faculty_facu_prof", value)
		} else if value.Valid {
			pr.faculty_facu_prof = new(int)
			*pr.faculty_facu_prof = int(value.Int64)
		}
		if value, ok := values[1].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field prefix_ID", value)
		} else if value.Valid {
			pr.prefix_ID = new(int)
			*pr.prefix_ID = int(value.Int64)
		}
		if value, ok := values[2].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field professorship_ID", value)
		} else if value.Valid {
			pr.professorship_ID = new(int)
			*pr.professorship_ID = int(value.Int64)
		}
	}
	return nil
}

// QueryProfPre queries the prof_pre edge of the Professor.
func (pr *Professor) QueryProfPre() *PrefixQuery {
	return (&ProfessorClient{config: pr.config}).QueryProfPre(pr)
}

// QueryProfFacu queries the prof_facu edge of the Professor.
func (pr *Professor) QueryProfFacu() *FacultyQuery {
	return (&ProfessorClient{config: pr.config}).QueryProfFacu(pr)
}

// QueryProfPros queries the prof_pros edge of the Professor.
func (pr *Professor) QueryProfPros() *ProfessorshipQuery {
	return (&ProfessorClient{config: pr.config}).QueryProfPros(pr)
}

// Update returns a builder for updating this Professor.
// Note that, you need to call Professor.Unwrap() before calling this method, if this Professor
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Professor) Update() *ProfessorUpdateOne {
	return (&ProfessorClient{config: pr.config}).UpdateOne(pr)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (pr *Professor) Unwrap() *Professor {
	tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Professor is not a transactional entity")
	}
	pr.config.driver = tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Professor) String() string {
	var builder strings.Builder
	builder.WriteString("Professor(")
	builder.WriteString(fmt.Sprintf("id=%v", pr.ID))
	builder.WriteString(", name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", tel=")
	builder.WriteString(pr.Tel)
	builder.WriteString(", email=")
	builder.WriteString(pr.Email)
	builder.WriteByte(')')
	return builder.String()
}

// Professors is a parsable slice of Professor.
type Professors []*Professor

func (pr Professors) config(cfg config) {
	for _i := range pr {
		pr[_i].config = cfg
	}
}
