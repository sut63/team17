// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/activity"
	"github.com/sut63/team17/app/ent/degree"
	"github.com/sut63/team17/app/ent/gender"
	"github.com/sut63/team17/app/ent/predicate"
	"github.com/sut63/team17/app/ent/prefix"
	"github.com/sut63/team17/app/ent/province"
	"github.com/sut63/team17/app/ent/results"
	"github.com/sut63/team17/app/ent/student"
)

// StudentUpdate is the builder for updating Student entities.
type StudentUpdate struct {
	config
	hooks      []Hook
	mutation   *StudentMutation
	predicates []predicate.Student
}

// Where adds a new predicate for the builder.
func (su *StudentUpdate) Where(ps ...predicate.Student) *StudentUpdate {
	su.predicates = append(su.predicates, ps...)
	return su
}

// SetFname sets the fname field.
func (su *StudentUpdate) SetFname(s string) *StudentUpdate {
	su.mutation.SetFname(s)
	return su
}

// SetLname sets the lname field.
func (su *StudentUpdate) SetLname(s string) *StudentUpdate {
	su.mutation.SetLname(s)
	return su
}

// SetSchoolname sets the schoolname field.
func (su *StudentUpdate) SetSchoolname(s string) *StudentUpdate {
	su.mutation.SetSchoolname(s)
	return su
}

// SetRecentAddress sets the recent_address field.
func (su *StudentUpdate) SetRecentAddress(s string) *StudentUpdate {
	su.mutation.SetRecentAddress(s)
	return su
}

// SetTelephone sets the telephone field.
func (su *StudentUpdate) SetTelephone(i int) *StudentUpdate {
	su.mutation.ResetTelephone()
	su.mutation.SetTelephone(i)
	return su
}

// AddTelephone adds i to telephone.
func (su *StudentUpdate) AddTelephone(i int) *StudentUpdate {
	su.mutation.AddTelephone(i)
	return su
}

// SetEmail sets the email field.
func (su *StudentUpdate) SetEmail(s string) *StudentUpdate {
	su.mutation.SetEmail(s)
	return su
}

// SetStudGendID sets the stud_gend edge to Gender by id.
func (su *StudentUpdate) SetStudGendID(id int) *StudentUpdate {
	su.mutation.SetStudGendID(id)
	return su
}

// SetNillableStudGendID sets the stud_gend edge to Gender by id if the given value is not nil.
func (su *StudentUpdate) SetNillableStudGendID(id *int) *StudentUpdate {
	if id != nil {
		su = su.SetStudGendID(*id)
	}
	return su
}

// SetStudGend sets the stud_gend edge to Gender.
func (su *StudentUpdate) SetStudGend(g *Gender) *StudentUpdate {
	return su.SetStudGendID(g.ID)
}

// AddStudActiIDs adds the stud_acti edge to Activity by ids.
func (su *StudentUpdate) AddStudActiIDs(ids ...int) *StudentUpdate {
	su.mutation.AddStudActiIDs(ids...)
	return su
}

// AddStudActi adds the stud_acti edges to Activity.
func (su *StudentUpdate) AddStudActi(a ...*Activity) *StudentUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddStudActiIDs(ids...)
}

// AddStudResuIDs adds the stud_resu edge to Results by ids.
func (su *StudentUpdate) AddStudResuIDs(ids ...int) *StudentUpdate {
	su.mutation.AddStudResuIDs(ids...)
	return su
}

// AddStudResu adds the stud_resu edges to Results.
func (su *StudentUpdate) AddStudResu(r ...*Results) *StudentUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.AddStudResuIDs(ids...)
}

// SetStudProvID sets the stud_prov edge to Province by id.
func (su *StudentUpdate) SetStudProvID(id int) *StudentUpdate {
	su.mutation.SetStudProvID(id)
	return su
}

// SetNillableStudProvID sets the stud_prov edge to Province by id if the given value is not nil.
func (su *StudentUpdate) SetNillableStudProvID(id *int) *StudentUpdate {
	if id != nil {
		su = su.SetStudProvID(*id)
	}
	return su
}

// SetStudProv sets the stud_prov edge to Province.
func (su *StudentUpdate) SetStudProv(p *Province) *StudentUpdate {
	return su.SetStudProvID(p.ID)
}

// SetStudDistID sets the stud_dist edge to Province by id.
func (su *StudentUpdate) SetStudDistID(id int) *StudentUpdate {
	su.mutation.SetStudDistID(id)
	return su
}

// SetNillableStudDistID sets the stud_dist edge to Province by id if the given value is not nil.
func (su *StudentUpdate) SetNillableStudDistID(id *int) *StudentUpdate {
	if id != nil {
		su = su.SetStudDistID(*id)
	}
	return su
}

// SetStudDist sets the stud_dist edge to Province.
func (su *StudentUpdate) SetStudDist(p *Province) *StudentUpdate {
	return su.SetStudDistID(p.ID)
}

// SetStudSubdID sets the stud_subd edge to Province by id.
func (su *StudentUpdate) SetStudSubdID(id int) *StudentUpdate {
	su.mutation.SetStudSubdID(id)
	return su
}

// SetNillableStudSubdID sets the stud_subd edge to Province by id if the given value is not nil.
func (su *StudentUpdate) SetNillableStudSubdID(id *int) *StudentUpdate {
	if id != nil {
		su = su.SetStudSubdID(*id)
	}
	return su
}

// SetStudSubd sets the stud_subd edge to Province.
func (su *StudentUpdate) SetStudSubd(p *Province) *StudentUpdate {
	return su.SetStudSubdID(p.ID)
}

// SetStudPostID sets the stud_post edge to Province by id.
func (su *StudentUpdate) SetStudPostID(id int) *StudentUpdate {
	su.mutation.SetStudPostID(id)
	return su
}

// SetNillableStudPostID sets the stud_post edge to Province by id if the given value is not nil.
func (su *StudentUpdate) SetNillableStudPostID(id *int) *StudentUpdate {
	if id != nil {
		su = su.SetStudPostID(*id)
	}
	return su
}

// SetStudPost sets the stud_post edge to Province.
func (su *StudentUpdate) SetStudPost(p *Province) *StudentUpdate {
	return su.SetStudPostID(p.ID)
}

// SetStudPrefID sets the stud_pref edge to Prefix by id.
func (su *StudentUpdate) SetStudPrefID(id int) *StudentUpdate {
	su.mutation.SetStudPrefID(id)
	return su
}

// SetNillableStudPrefID sets the stud_pref edge to Prefix by id if the given value is not nil.
func (su *StudentUpdate) SetNillableStudPrefID(id *int) *StudentUpdate {
	if id != nil {
		su = su.SetStudPrefID(*id)
	}
	return su
}

// SetStudPref sets the stud_pref edge to Prefix.
func (su *StudentUpdate) SetStudPref(p *Prefix) *StudentUpdate {
	return su.SetStudPrefID(p.ID)
}

// SetStudDegrID sets the stud_degr edge to Degree by id.
func (su *StudentUpdate) SetStudDegrID(id int) *StudentUpdate {
	su.mutation.SetStudDegrID(id)
	return su
}

// SetNillableStudDegrID sets the stud_degr edge to Degree by id if the given value is not nil.
func (su *StudentUpdate) SetNillableStudDegrID(id *int) *StudentUpdate {
	if id != nil {
		su = su.SetStudDegrID(*id)
	}
	return su
}

// SetStudDegr sets the stud_degr edge to Degree.
func (su *StudentUpdate) SetStudDegr(d *Degree) *StudentUpdate {
	return su.SetStudDegrID(d.ID)
}

// Mutation returns the StudentMutation object of the builder.
func (su *StudentUpdate) Mutation() *StudentMutation {
	return su.mutation
}

// ClearStudGend clears the stud_gend edge to Gender.
func (su *StudentUpdate) ClearStudGend() *StudentUpdate {
	su.mutation.ClearStudGend()
	return su
}

// RemoveStudActiIDs removes the stud_acti edge to Activity by ids.
func (su *StudentUpdate) RemoveStudActiIDs(ids ...int) *StudentUpdate {
	su.mutation.RemoveStudActiIDs(ids...)
	return su
}

// RemoveStudActi removes stud_acti edges to Activity.
func (su *StudentUpdate) RemoveStudActi(a ...*Activity) *StudentUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveStudActiIDs(ids...)
}

// RemoveStudResuIDs removes the stud_resu edge to Results by ids.
func (su *StudentUpdate) RemoveStudResuIDs(ids ...int) *StudentUpdate {
	su.mutation.RemoveStudResuIDs(ids...)
	return su
}

// RemoveStudResu removes stud_resu edges to Results.
func (su *StudentUpdate) RemoveStudResu(r ...*Results) *StudentUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return su.RemoveStudResuIDs(ids...)
}

// ClearStudProv clears the stud_prov edge to Province.
func (su *StudentUpdate) ClearStudProv() *StudentUpdate {
	su.mutation.ClearStudProv()
	return su
}

// ClearStudDist clears the stud_dist edge to Province.
func (su *StudentUpdate) ClearStudDist() *StudentUpdate {
	su.mutation.ClearStudDist()
	return su
}

// ClearStudSubd clears the stud_subd edge to Province.
func (su *StudentUpdate) ClearStudSubd() *StudentUpdate {
	su.mutation.ClearStudSubd()
	return su
}

// ClearStudPost clears the stud_post edge to Province.
func (su *StudentUpdate) ClearStudPost() *StudentUpdate {
	su.mutation.ClearStudPost()
	return su
}

// ClearStudPref clears the stud_pref edge to Prefix.
func (su *StudentUpdate) ClearStudPref() *StudentUpdate {
	su.mutation.ClearStudPref()
	return su
}

// ClearStudDegr clears the stud_degr edge to Degree.
func (su *StudentUpdate) ClearStudDegr() *StudentUpdate {
	su.mutation.ClearStudDegr()
	return su
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (su *StudentUpdate) Save(ctx context.Context) (int, error) {
	if v, ok := su.mutation.Fname(); ok {
		if err := student.FnameValidator(v); err != nil {
			return 0, &ValidationError{Name: "fname", err: fmt.Errorf("ent: validator failed for field \"fname\": %w", err)}
		}
	}
	if v, ok := su.mutation.Lname(); ok {
		if err := student.LnameValidator(v); err != nil {
			return 0, &ValidationError{Name: "lname", err: fmt.Errorf("ent: validator failed for field \"lname\": %w", err)}
		}
	}
	if v, ok := su.mutation.Schoolname(); ok {
		if err := student.SchoolnameValidator(v); err != nil {
			return 0, &ValidationError{Name: "schoolname", err: fmt.Errorf("ent: validator failed for field \"schoolname\": %w", err)}
		}
	}
	if v, ok := su.mutation.RecentAddress(); ok {
		if err := student.RecentAddressValidator(v); err != nil {
			return 0, &ValidationError{Name: "recent_address", err: fmt.Errorf("ent: validator failed for field \"recent_address\": %w", err)}
		}
	}

	var (
		err      error
		affected int
	)
	if len(su.hooks) == 0 {
		affected, err = su.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			su.mutation = mutation
			affected, err = su.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(su.hooks) - 1; i >= 0; i-- {
			mut = su.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, su.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (su *StudentUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StudentUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StudentUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *StudentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   student.Table,
			Columns: student.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: student.FieldID,
			},
		},
	}
	if ps := su.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Fname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldFname,
		})
	}
	if value, ok := su.mutation.Lname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldLname,
		})
	}
	if value, ok := su.mutation.Schoolname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldSchoolname,
		})
	}
	if value, ok := su.mutation.RecentAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldRecentAddress,
		})
	}
	if value, ok := su.mutation.Telephone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: student.FieldTelephone,
		})
	}
	if value, ok := su.mutation.AddedTelephone(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: student.FieldTelephone,
		})
	}
	if value, ok := su.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldEmail,
		})
	}
	if su.mutation.StudGendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudGendTable,
			Columns: []string{student.StudGendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StudGendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudGendTable,
			Columns: []string{student.StudGendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := su.mutation.RemovedStudActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.StudActiTable,
			Columns: []string{student.StudActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StudActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.StudActiTable,
			Columns: []string{student.StudActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := su.mutation.RemovedStudResuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.StudResuTable,
			Columns: []string{student.StudResuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: results.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StudResuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.StudResuTable,
			Columns: []string{student.StudResuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: results.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StudProvCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudProvTable,
			Columns: []string{student.StudProvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StudProvIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudProvTable,
			Columns: []string{student.StudProvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StudDistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudDistTable,
			Columns: []string{student.StudDistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StudDistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudDistTable,
			Columns: []string{student.StudDistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StudSubdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudSubdTable,
			Columns: []string{student.StudSubdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StudSubdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudSubdTable,
			Columns: []string{student.StudSubdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StudPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudPostTable,
			Columns: []string{student.StudPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StudPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudPostTable,
			Columns: []string{student.StudPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StudPrefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudPrefTable,
			Columns: []string{student.StudPrefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StudPrefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudPrefTable,
			Columns: []string{student.StudPrefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.StudDegrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudDegrTable,
			Columns: []string{student.StudDegrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StudDegrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudDegrTable,
			Columns: []string{student.StudDegrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// StudentUpdateOne is the builder for updating a single Student entity.
type StudentUpdateOne struct {
	config
	hooks    []Hook
	mutation *StudentMutation
}

// SetFname sets the fname field.
func (suo *StudentUpdateOne) SetFname(s string) *StudentUpdateOne {
	suo.mutation.SetFname(s)
	return suo
}

// SetLname sets the lname field.
func (suo *StudentUpdateOne) SetLname(s string) *StudentUpdateOne {
	suo.mutation.SetLname(s)
	return suo
}

// SetSchoolname sets the schoolname field.
func (suo *StudentUpdateOne) SetSchoolname(s string) *StudentUpdateOne {
	suo.mutation.SetSchoolname(s)
	return suo
}

// SetRecentAddress sets the recent_address field.
func (suo *StudentUpdateOne) SetRecentAddress(s string) *StudentUpdateOne {
	suo.mutation.SetRecentAddress(s)
	return suo
}

// SetTelephone sets the telephone field.
func (suo *StudentUpdateOne) SetTelephone(i int) *StudentUpdateOne {
	suo.mutation.ResetTelephone()
	suo.mutation.SetTelephone(i)
	return suo
}

// AddTelephone adds i to telephone.
func (suo *StudentUpdateOne) AddTelephone(i int) *StudentUpdateOne {
	suo.mutation.AddTelephone(i)
	return suo
}

// SetEmail sets the email field.
func (suo *StudentUpdateOne) SetEmail(s string) *StudentUpdateOne {
	suo.mutation.SetEmail(s)
	return suo
}

// SetStudGendID sets the stud_gend edge to Gender by id.
func (suo *StudentUpdateOne) SetStudGendID(id int) *StudentUpdateOne {
	suo.mutation.SetStudGendID(id)
	return suo
}

// SetNillableStudGendID sets the stud_gend edge to Gender by id if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableStudGendID(id *int) *StudentUpdateOne {
	if id != nil {
		suo = suo.SetStudGendID(*id)
	}
	return suo
}

// SetStudGend sets the stud_gend edge to Gender.
func (suo *StudentUpdateOne) SetStudGend(g *Gender) *StudentUpdateOne {
	return suo.SetStudGendID(g.ID)
}

// AddStudActiIDs adds the stud_acti edge to Activity by ids.
func (suo *StudentUpdateOne) AddStudActiIDs(ids ...int) *StudentUpdateOne {
	suo.mutation.AddStudActiIDs(ids...)
	return suo
}

// AddStudActi adds the stud_acti edges to Activity.
func (suo *StudentUpdateOne) AddStudActi(a ...*Activity) *StudentUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddStudActiIDs(ids...)
}

// AddStudResuIDs adds the stud_resu edge to Results by ids.
func (suo *StudentUpdateOne) AddStudResuIDs(ids ...int) *StudentUpdateOne {
	suo.mutation.AddStudResuIDs(ids...)
	return suo
}

// AddStudResu adds the stud_resu edges to Results.
func (suo *StudentUpdateOne) AddStudResu(r ...*Results) *StudentUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.AddStudResuIDs(ids...)
}

// SetStudProvID sets the stud_prov edge to Province by id.
func (suo *StudentUpdateOne) SetStudProvID(id int) *StudentUpdateOne {
	suo.mutation.SetStudProvID(id)
	return suo
}

// SetNillableStudProvID sets the stud_prov edge to Province by id if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableStudProvID(id *int) *StudentUpdateOne {
	if id != nil {
		suo = suo.SetStudProvID(*id)
	}
	return suo
}

// SetStudProv sets the stud_prov edge to Province.
func (suo *StudentUpdateOne) SetStudProv(p *Province) *StudentUpdateOne {
	return suo.SetStudProvID(p.ID)
}

// SetStudDistID sets the stud_dist edge to Province by id.
func (suo *StudentUpdateOne) SetStudDistID(id int) *StudentUpdateOne {
	suo.mutation.SetStudDistID(id)
	return suo
}

// SetNillableStudDistID sets the stud_dist edge to Province by id if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableStudDistID(id *int) *StudentUpdateOne {
	if id != nil {
		suo = suo.SetStudDistID(*id)
	}
	return suo
}

// SetStudDist sets the stud_dist edge to Province.
func (suo *StudentUpdateOne) SetStudDist(p *Province) *StudentUpdateOne {
	return suo.SetStudDistID(p.ID)
}

// SetStudSubdID sets the stud_subd edge to Province by id.
func (suo *StudentUpdateOne) SetStudSubdID(id int) *StudentUpdateOne {
	suo.mutation.SetStudSubdID(id)
	return suo
}

// SetNillableStudSubdID sets the stud_subd edge to Province by id if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableStudSubdID(id *int) *StudentUpdateOne {
	if id != nil {
		suo = suo.SetStudSubdID(*id)
	}
	return suo
}

// SetStudSubd sets the stud_subd edge to Province.
func (suo *StudentUpdateOne) SetStudSubd(p *Province) *StudentUpdateOne {
	return suo.SetStudSubdID(p.ID)
}

// SetStudPostID sets the stud_post edge to Province by id.
func (suo *StudentUpdateOne) SetStudPostID(id int) *StudentUpdateOne {
	suo.mutation.SetStudPostID(id)
	return suo
}

// SetNillableStudPostID sets the stud_post edge to Province by id if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableStudPostID(id *int) *StudentUpdateOne {
	if id != nil {
		suo = suo.SetStudPostID(*id)
	}
	return suo
}

// SetStudPost sets the stud_post edge to Province.
func (suo *StudentUpdateOne) SetStudPost(p *Province) *StudentUpdateOne {
	return suo.SetStudPostID(p.ID)
}

// SetStudPrefID sets the stud_pref edge to Prefix by id.
func (suo *StudentUpdateOne) SetStudPrefID(id int) *StudentUpdateOne {
	suo.mutation.SetStudPrefID(id)
	return suo
}

// SetNillableStudPrefID sets the stud_pref edge to Prefix by id if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableStudPrefID(id *int) *StudentUpdateOne {
	if id != nil {
		suo = suo.SetStudPrefID(*id)
	}
	return suo
}

// SetStudPref sets the stud_pref edge to Prefix.
func (suo *StudentUpdateOne) SetStudPref(p *Prefix) *StudentUpdateOne {
	return suo.SetStudPrefID(p.ID)
}

// SetStudDegrID sets the stud_degr edge to Degree by id.
func (suo *StudentUpdateOne) SetStudDegrID(id int) *StudentUpdateOne {
	suo.mutation.SetStudDegrID(id)
	return suo
}

// SetNillableStudDegrID sets the stud_degr edge to Degree by id if the given value is not nil.
func (suo *StudentUpdateOne) SetNillableStudDegrID(id *int) *StudentUpdateOne {
	if id != nil {
		suo = suo.SetStudDegrID(*id)
	}
	return suo
}

// SetStudDegr sets the stud_degr edge to Degree.
func (suo *StudentUpdateOne) SetStudDegr(d *Degree) *StudentUpdateOne {
	return suo.SetStudDegrID(d.ID)
}

// Mutation returns the StudentMutation object of the builder.
func (suo *StudentUpdateOne) Mutation() *StudentMutation {
	return suo.mutation
}

// ClearStudGend clears the stud_gend edge to Gender.
func (suo *StudentUpdateOne) ClearStudGend() *StudentUpdateOne {
	suo.mutation.ClearStudGend()
	return suo
}

// RemoveStudActiIDs removes the stud_acti edge to Activity by ids.
func (suo *StudentUpdateOne) RemoveStudActiIDs(ids ...int) *StudentUpdateOne {
	suo.mutation.RemoveStudActiIDs(ids...)
	return suo
}

// RemoveStudActi removes stud_acti edges to Activity.
func (suo *StudentUpdateOne) RemoveStudActi(a ...*Activity) *StudentUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveStudActiIDs(ids...)
}

// RemoveStudResuIDs removes the stud_resu edge to Results by ids.
func (suo *StudentUpdateOne) RemoveStudResuIDs(ids ...int) *StudentUpdateOne {
	suo.mutation.RemoveStudResuIDs(ids...)
	return suo
}

// RemoveStudResu removes stud_resu edges to Results.
func (suo *StudentUpdateOne) RemoveStudResu(r ...*Results) *StudentUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return suo.RemoveStudResuIDs(ids...)
}

// ClearStudProv clears the stud_prov edge to Province.
func (suo *StudentUpdateOne) ClearStudProv() *StudentUpdateOne {
	suo.mutation.ClearStudProv()
	return suo
}

// ClearStudDist clears the stud_dist edge to Province.
func (suo *StudentUpdateOne) ClearStudDist() *StudentUpdateOne {
	suo.mutation.ClearStudDist()
	return suo
}

// ClearStudSubd clears the stud_subd edge to Province.
func (suo *StudentUpdateOne) ClearStudSubd() *StudentUpdateOne {
	suo.mutation.ClearStudSubd()
	return suo
}

// ClearStudPost clears the stud_post edge to Province.
func (suo *StudentUpdateOne) ClearStudPost() *StudentUpdateOne {
	suo.mutation.ClearStudPost()
	return suo
}

// ClearStudPref clears the stud_pref edge to Prefix.
func (suo *StudentUpdateOne) ClearStudPref() *StudentUpdateOne {
	suo.mutation.ClearStudPref()
	return suo
}

// ClearStudDegr clears the stud_degr edge to Degree.
func (suo *StudentUpdateOne) ClearStudDegr() *StudentUpdateOne {
	suo.mutation.ClearStudDegr()
	return suo
}

// Save executes the query and returns the updated entity.
func (suo *StudentUpdateOne) Save(ctx context.Context) (*Student, error) {
	if v, ok := suo.mutation.Fname(); ok {
		if err := student.FnameValidator(v); err != nil {
			return nil, &ValidationError{Name: "fname", err: fmt.Errorf("ent: validator failed for field \"fname\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Lname(); ok {
		if err := student.LnameValidator(v); err != nil {
			return nil, &ValidationError{Name: "lname", err: fmt.Errorf("ent: validator failed for field \"lname\": %w", err)}
		}
	}
	if v, ok := suo.mutation.Schoolname(); ok {
		if err := student.SchoolnameValidator(v); err != nil {
			return nil, &ValidationError{Name: "schoolname", err: fmt.Errorf("ent: validator failed for field \"schoolname\": %w", err)}
		}
	}
	if v, ok := suo.mutation.RecentAddress(); ok {
		if err := student.RecentAddressValidator(v); err != nil {
			return nil, &ValidationError{Name: "recent_address", err: fmt.Errorf("ent: validator failed for field \"recent_address\": %w", err)}
		}
	}

	var (
		err  error
		node *Student
	)
	if len(suo.hooks) == 0 {
		node, err = suo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*StudentMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			suo.mutation = mutation
			node, err = suo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(suo.hooks) - 1; i >= 0; i-- {
			mut = suo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, suo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StudentUpdateOne) SaveX(ctx context.Context) *Student {
	s, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return s
}

// Exec executes the query on the entity.
func (suo *StudentUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StudentUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *StudentUpdateOne) sqlSave(ctx context.Context) (s *Student, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   student.Table,
			Columns: student.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: student.FieldID,
			},
		},
	}
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Student.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := suo.mutation.Fname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldFname,
		})
	}
	if value, ok := suo.mutation.Lname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldLname,
		})
	}
	if value, ok := suo.mutation.Schoolname(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldSchoolname,
		})
	}
	if value, ok := suo.mutation.RecentAddress(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldRecentAddress,
		})
	}
	if value, ok := suo.mutation.Telephone(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: student.FieldTelephone,
		})
	}
	if value, ok := suo.mutation.AddedTelephone(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: student.FieldTelephone,
		})
	}
	if value, ok := suo.mutation.Email(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: student.FieldEmail,
		})
	}
	if suo.mutation.StudGendCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudGendTable,
			Columns: []string{student.StudGendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StudGendIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudGendTable,
			Columns: []string{student.StudGendColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: gender.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := suo.mutation.RemovedStudActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.StudActiTable,
			Columns: []string{student.StudActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StudActiIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.StudActiTable,
			Columns: []string{student.StudActiColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: activity.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if nodes := suo.mutation.RemovedStudResuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.StudResuTable,
			Columns: []string{student.StudResuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: results.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StudResuIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   student.StudResuTable,
			Columns: []string{student.StudResuColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: results.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StudProvCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudProvTable,
			Columns: []string{student.StudProvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StudProvIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudProvTable,
			Columns: []string{student.StudProvColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StudDistCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudDistTable,
			Columns: []string{student.StudDistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StudDistIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudDistTable,
			Columns: []string{student.StudDistColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StudSubdCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudSubdTable,
			Columns: []string{student.StudSubdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StudSubdIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudSubdTable,
			Columns: []string{student.StudSubdColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StudPostCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudPostTable,
			Columns: []string{student.StudPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StudPostIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudPostTable,
			Columns: []string{student.StudPostColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: province.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StudPrefCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudPrefTable,
			Columns: []string{student.StudPrefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StudPrefIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudPrefTable,
			Columns: []string{student.StudPrefColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: prefix.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.StudDegrCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudDegrTable,
			Columns: []string{student.StudDegrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StudDegrIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   student.StudDegrTable,
			Columns: []string{student.StudDegrColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: degree.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	s = &Student{config: suo.config}
	_spec.Assign = s.assignValues
	_spec.ScanValues = s.scanValues()
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return s, nil
}
