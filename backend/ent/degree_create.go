// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/course"
	"github.com/sut63/team17/app/ent/degree"
	"github.com/sut63/team17/app/ent/student"
)

// DegreeCreate is the builder for creating a Degree entity.
type DegreeCreate struct {
	config
	mutation *DegreeMutation
	hooks    []Hook
}

// SetDegree sets the degree field.
func (dc *DegreeCreate) SetDegree(s string) *DegreeCreate {
	dc.mutation.SetDegree(s)
	return dc
}

// AddDegrStudIDs adds the degr_stud edge to Student by ids.
func (dc *DegreeCreate) AddDegrStudIDs(ids ...int) *DegreeCreate {
	dc.mutation.AddDegrStudIDs(ids...)
	return dc
}

// AddDegrStud adds the degr_stud edges to Student.
func (dc *DegreeCreate) AddDegrStud(s ...*Student) *DegreeCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return dc.AddDegrStudIDs(ids...)
}

// AddDegrCourIDs adds the degr_cour edge to Course by ids.
func (dc *DegreeCreate) AddDegrCourIDs(ids ...int) *DegreeCreate {
	dc.mutation.AddDegrCourIDs(ids...)
	return dc
}

// AddDegrCour adds the degr_cour edges to Course.
func (dc *DegreeCreate) AddDegrCour(c ...*Course) *DegreeCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dc.AddDegrCourIDs(ids...)
}

// Mutation returns the DegreeMutation object of the builder.
func (dc *DegreeCreate) Mutation() *DegreeMutation {
	return dc.mutation
}

// Save creates the Degree in the database.
func (dc *DegreeCreate) Save(ctx context.Context) (*Degree, error) {
	if _, ok := dc.mutation.Degree(); !ok {
		return nil, &ValidationError{Name: "degree", err: errors.New("ent: missing required field \"degree\"")}
	}
	if v, ok := dc.mutation.Degree(); ok {
		if err := degree.DegreeValidator(v); err != nil {
			return nil, &ValidationError{Name: "degree", err: fmt.Errorf("ent: validator failed for field \"degree\": %w", err)}
		}
	}
	var (
		err  error
		node *Degree
	)
	if len(dc.hooks) == 0 {
		node, err = dc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*DegreeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			dc.mutation = mutation
			node, err = dc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(dc.hooks) - 1; i >= 0; i-- {
			mut = dc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, dc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DegreeCreate) SaveX(ctx context.Context) *Degree {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (dc *DegreeCreate) sqlSave(ctx context.Context) (*Degree, error) {
	d, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	d.ID = int(id)
	return d, nil
}

func (dc *DegreeCreate) createSpec() (*Degree, *sqlgraph.CreateSpec) {
	var (
		d     = &Degree{config: dc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: degree.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: degree.FieldID,
			},
		}
	)
	if value, ok := dc.mutation.Degree(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: degree.FieldDegree,
		})
		d.Degree = value
	}
	if nodes := dc.mutation.DegrStudIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   degree.DegrStudTable,
			Columns: []string{degree.DegrStudColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.DegrCourIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   degree.DegrCourTable,
			Columns: []string{degree.DegrCourColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: course.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return d, _spec
}
