// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
	"github.com/sut63/team17/app/ent/results"
	"github.com/sut63/team17/app/ent/student"
	"github.com/sut63/team17/app/ent/subject"
	"github.com/sut63/team17/app/ent/term"
	"github.com/sut63/team17/app/ent/year"
)

// ResultsCreate is the builder for creating a Results entity.
type ResultsCreate struct {
	config
	mutation *ResultsMutation
	hooks    []Hook
}

// SetGrade sets the grade field.
func (rc *ResultsCreate) SetGrade(f float64) *ResultsCreate {
	rc.mutation.SetGrade(f)
	return rc
}

// SetResuYearID sets the resu_year edge to Year by id.
func (rc *ResultsCreate) SetResuYearID(id int) *ResultsCreate {
	rc.mutation.SetResuYearID(id)
	return rc
}

// SetNillableResuYearID sets the resu_year edge to Year by id if the given value is not nil.
func (rc *ResultsCreate) SetNillableResuYearID(id *int) *ResultsCreate {
	if id != nil {
		rc = rc.SetResuYearID(*id)
	}
	return rc
}

// SetResuYear sets the resu_year edge to Year.
func (rc *ResultsCreate) SetResuYear(y *Year) *ResultsCreate {
	return rc.SetResuYearID(y.ID)
}

// SetResuSubjID sets the resu_subj edge to Subject by id.
func (rc *ResultsCreate) SetResuSubjID(id int) *ResultsCreate {
	rc.mutation.SetResuSubjID(id)
	return rc
}

// SetNillableResuSubjID sets the resu_subj edge to Subject by id if the given value is not nil.
func (rc *ResultsCreate) SetNillableResuSubjID(id *int) *ResultsCreate {
	if id != nil {
		rc = rc.SetResuSubjID(*id)
	}
	return rc
}

// SetResuSubj sets the resu_subj edge to Subject.
func (rc *ResultsCreate) SetResuSubj(s *Subject) *ResultsCreate {
	return rc.SetResuSubjID(s.ID)
}

// SetResuStudID sets the resu_stud edge to Student by id.
func (rc *ResultsCreate) SetResuStudID(id int) *ResultsCreate {
	rc.mutation.SetResuStudID(id)
	return rc
}

// SetNillableResuStudID sets the resu_stud edge to Student by id if the given value is not nil.
func (rc *ResultsCreate) SetNillableResuStudID(id *int) *ResultsCreate {
	if id != nil {
		rc = rc.SetResuStudID(*id)
	}
	return rc
}

// SetResuStud sets the resu_stud edge to Student.
func (rc *ResultsCreate) SetResuStud(s *Student) *ResultsCreate {
	return rc.SetResuStudID(s.ID)
}

// SetResuTermID sets the resu_term edge to Term by id.
func (rc *ResultsCreate) SetResuTermID(id int) *ResultsCreate {
	rc.mutation.SetResuTermID(id)
	return rc
}

// SetNillableResuTermID sets the resu_term edge to Term by id if the given value is not nil.
func (rc *ResultsCreate) SetNillableResuTermID(id *int) *ResultsCreate {
	if id != nil {
		rc = rc.SetResuTermID(*id)
	}
	return rc
}

// SetResuTerm sets the resu_term edge to Term.
func (rc *ResultsCreate) SetResuTerm(t *Term) *ResultsCreate {
	return rc.SetResuTermID(t.ID)
}

// Mutation returns the ResultsMutation object of the builder.
func (rc *ResultsCreate) Mutation() *ResultsMutation {
	return rc.mutation
}

// Save creates the Results in the database.
func (rc *ResultsCreate) Save(ctx context.Context) (*Results, error) {
	if _, ok := rc.mutation.Grade(); !ok {
		return nil, &ValidationError{Name: "grade", err: errors.New("ent: missing required field \"grade\"")}
	}
	if v, ok := rc.mutation.Grade(); ok {
		if err := results.GradeValidator(v); err != nil {
			return nil, &ValidationError{Name: "grade", err: fmt.Errorf("ent: validator failed for field \"grade\": %w", err)}
		}
	}
	var (
		err  error
		node *Results
	)
	if len(rc.hooks) == 0 {
		node, err = rc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ResultsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			rc.mutation = mutation
			node, err = rc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(rc.hooks) - 1; i >= 0; i-- {
			mut = rc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, rc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (rc *ResultsCreate) SaveX(ctx context.Context) *Results {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (rc *ResultsCreate) sqlSave(ctx context.Context) (*Results, error) {
	r, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	r.ID = int(id)
	return r, nil
}

func (rc *ResultsCreate) createSpec() (*Results, *sqlgraph.CreateSpec) {
	var (
		r     = &Results{config: rc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: results.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: results.FieldID,
			},
		}
	)
	if value, ok := rc.mutation.Grade(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeFloat64,
			Value:  value,
			Column: results.FieldGrade,
		})
		r.Grade = value
	}
	if nodes := rc.mutation.ResuYearIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   results.ResuYearTable,
			Columns: []string{results.ResuYearColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: year.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ResuSubjIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   results.ResuSubjTable,
			Columns: []string{results.ResuSubjColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: subject.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ResuStudIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   results.ResuStudTable,
			Columns: []string{results.ResuStudColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: student.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := rc.mutation.ResuTermIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   results.ResuTermTable,
			Columns: []string{results.ResuTermColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: term.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return r, _spec
}
