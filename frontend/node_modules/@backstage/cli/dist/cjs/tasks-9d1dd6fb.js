'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var chalk2 = _interopDefault(require('chalk'));
var fs = _interopDefault(require('fs-extra'));
var path2 = require('path');
var path2__default = _interopDefault(path2);
var handlebars2 = _interopDefault(require('handlebars'));
var recursiveReadDir = _interopDefault(require('recursive-readdir'));
var ora2 = _interopDefault(require('ora'));

const TEAM_ID_RE = /^@[-\w]+\/[-\w]+$/;
const USER_ID_RE = /^@[-\w]+$/;
const EMAIL_RE = /^[^@]+@[-.\w]+\.[-\w]+$/i;
const DEFAULT_OWNER = "@spotify/backstage-core";
async function getCodeownersFilePath(rootDir) {
  const paths = [
    path2__default.join(rootDir, ".github", "CODEOWNERS"),
    path2__default.join(rootDir, ".gitlab", "CODEOWNERS"),
    path2__default.join(rootDir, "docs", "CODEOWNERS"),
    path2__default.join(rootDir, "CODEOWNERS")
  ];
  for (const p of paths) {
    if (await fs.pathExists(p)) {
      return p;
    }
  }
  return void 0;
}
function isValidSingleOwnerId(id) {
  if (!id || typeof id !== "string") {
    return false;
  }
  return TEAM_ID_RE.test(id) || USER_ID_RE.test(id) || EMAIL_RE.test(id);
}
function parseOwnerIds(spaceSeparatedOwnerIds) {
  if (!spaceSeparatedOwnerIds || typeof spaceSeparatedOwnerIds !== "string") {
    return void 0;
  }
  const ids = spaceSeparatedOwnerIds.split(" ").filter(Boolean);
  if (!ids.every(isValidSingleOwnerId)) {
    return void 0;
  }
  return ids;
}
async function addCodeownersEntry(codeownersFilePath, ownedPath, ownerIds) {
  const allLines = (await fs.readFile(codeownersFilePath, "utf8")).split("\n");
  const commentLines = [];
  for (const line of allLines) {
    if (line[0] !== "#") {
      break;
    }
    commentLines.push(line);
  }
  const oldDeclarationEntries = allLines.filter((line) => line[0] !== "#").map((line) => line.split(/\s+/).filter(Boolean)).filter((tokens) => tokens.length >= 2).map((tokens) => ({
    ownedPath: tokens[0],
    ownerIds: tokens.slice(1)
  }));
  const newDeclarationEntries = oldDeclarationEntries.filter((entry) => entry.ownedPath !== "*").concat([{ownedPath, ownerIds}]).sort((l1, l2) => l1.ownedPath.localeCompare(l2.ownedPath));
  newDeclarationEntries.unshift({
    ownedPath: "*",
    ownerIds: [DEFAULT_OWNER]
  });
  const longestOwnedPath = newDeclarationEntries.reduce((length, entry) => Math.max(length, entry.ownedPath.length), 0);
  const newDeclarationLines = newDeclarationEntries.map((entry) => {
    const entryPath = entry.ownedPath + " ".repeat(longestOwnedPath - entry.ownedPath.length);
    return [entryPath, ...entry.ownerIds].join(" ");
  });
  const newLines = [...commentLines, "", ...newDeclarationLines, ""];
  await fs.writeFile(codeownersFilePath, newLines.join("\n"), "utf8");
}

const TASK_NAME_MAX_LENGTH = 14;
class Task {
  static log(name = "") {
    process.stdout.write(`${chalk2.green(name)}
`);
  }
  static error(message = "") {
    process.stdout.write(`
${chalk2.red(message)}

`);
  }
  static section(name) {
    const title = chalk2.green(`${name}:`);
    process.stdout.write(`
 ${title}
`);
  }
  static exit(code = 0) {
    process.exit(code);
  }
  static async forItem(task, item, taskFunc) {
    const paddedTask = chalk2.green(task.padEnd(TASK_NAME_MAX_LENGTH));
    const spinner = ora2({
      prefixText: chalk2.green(`  ${paddedTask}${chalk2.cyan(item)}`),
      spinner: "arc",
      color: "green"
    }).start();
    try {
      await taskFunc();
      spinner.succeed();
    } catch (error) {
      spinner.fail();
      throw error;
    }
  }
}
async function templatingTask(templateDir, destinationDir, context) {
  const files = await recursiveReadDir(templateDir).catch((error) => {
    throw new Error(`Failed to read template directory: ${error.message}`);
  });
  for (const file of files) {
    const destinationFile = file.replace(templateDir, destinationDir);
    await fs.ensureDir(path2.dirname(destinationFile));
    if (file.endsWith(".hbs")) {
      await Task.forItem("templating", path2.basename(file), async () => {
        const destination = destinationFile.replace(/\.hbs$/, "");
        const template = await fs.readFile(file);
        const compiled = handlebars2.compile(template.toString());
        const contents = compiled({name: path2.basename(destination), ...context});
        await fs.writeFile(destination, contents).catch((error) => {
          throw new Error(`Failed to create file: ${destination}: ${error.message}`);
        });
      });
    } else {
      await Task.forItem("copying", path2.basename(file), async () => {
        await fs.copyFile(file, destinationFile).catch((error) => {
          const destination = destinationFile;
          throw new Error(`Failed to copy file to ${destination} : ${error.message}`);
        });
      });
    }
  }
}

exports.Task = Task;
exports.addCodeownersEntry = addCodeownersEntry;
exports.getCodeownersFilePath = getCodeownersFilePath;
exports.parseOwnerIds = parseOwnerIds;
exports.templatingTask = templatingTask;
