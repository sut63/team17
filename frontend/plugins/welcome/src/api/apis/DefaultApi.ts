/* tslint:disable */
/* eslint-disable */
/**
 * SUT SA Example API Playlist Vidoe
 * This is a sample server for SUT SE 2563
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@swagger.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    ControllersActivity,
    ControllersActivityFromJSON,
    ControllersActivityToJSON,
    ControllersCourse,
    ControllersCourseFromJSON,
    ControllersCourseToJSON,
    ControllersProfessor,
    ControllersProfessorFromJSON,
    ControllersProfessorToJSON,
    ControllersProvince,
    ControllersProvinceFromJSON,
    ControllersProvinceToJSON,
    ControllersResults,
    ControllersResultsFromJSON,
    ControllersResultsToJSON,
    ControllersStudent,
    ControllersStudentFromJSON,
    ControllersStudentToJSON,
    EntActivity,
    EntActivityFromJSON,
    EntActivityToJSON,
    EntAgency,
    EntAgencyFromJSON,
    EntAgencyToJSON,
    EntContinent,
    EntContinentFromJSON,
    EntContinentToJSON,
    EntCountry,
    EntCountryFromJSON,
    EntCountryToJSON,
    EntCourse,
    EntCourseFromJSON,
    EntCourseToJSON,
    EntDegree,
    EntDegreeFromJSON,
    EntDegreeToJSON,
    EntFaculty,
    EntFacultyFromJSON,
    EntFacultyToJSON,
    EntGender,
    EntGenderFromJSON,
    EntGenderToJSON,
    EntInstitution,
    EntInstitutionFromJSON,
    EntInstitutionToJSON,
    EntPlace,
    EntPlaceFromJSON,
    EntPlaceToJSON,
    EntPrefix,
    EntPrefixFromJSON,
    EntPrefixToJSON,
    EntProfessor,
    EntProfessorFromJSON,
    EntProfessorToJSON,
    EntProfessorship,
    EntProfessorshipFromJSON,
    EntProfessorshipToJSON,
    EntProvince,
    EntProvinceFromJSON,
    EntProvinceToJSON,
    EntRegion,
    EntRegionFromJSON,
    EntRegionToJSON,
    EntResults,
    EntResultsFromJSON,
    EntResultsToJSON,
    EntStudent,
    EntStudentFromJSON,
    EntStudentToJSON,
    EntSubject,
    EntSubjectFromJSON,
    EntSubjectToJSON,
    EntTerm,
    EntTermFromJSON,
    EntTermToJSON,
    EntYear,
    EntYearFromJSON,
    EntYearToJSON,
} from '../models';

export interface CreateActivityRequest {
    activity: ControllersActivity;
}

export interface CreateCourseRequest {
    course: ControllersCourse;
}

export interface CreateProfessorRequest {
    professor: ControllersProfessor;
}

export interface CreateProvinceRequest {
    province: ControllersProvince;
}

export interface CreateResultsRequest {
    results: ControllersResults;
}

export interface CreateStudentRequest {
    student: ControllersStudent;
}

export interface DeleteActivityRequest {
    id: number;
}

export interface DeleteProfessorRequest {
    id: number;
}

export interface DeleteResultsRequest {
    id: number;
}

export interface GetAgencyRequest {
    id: number;
}

export interface GetContinentRequest {
    id: number;
}

export interface GetCountryRequest {
    id: number;
}

export interface GetCourseRequest {
    id: number;
}

export interface GetDegreeRequest {
    id: number;
}

export interface GetFacultyRequest {
    id: number;
}

export interface GetGenderRequest {
    id: number;
}

export interface GetInstitutionRequest {
    id: number;
}

export interface GetPlaceRequest {
    id: number;
}

export interface GetPrefixRequest {
    id: number;
}

export interface GetProfessorshipRequest {
    id: number;
}

export interface GetRegionRequest {
    id: number;
}

export interface GetResultsRequest {
    id: number;
}

export interface GetStudentRequest {
    id: number;
}

export interface GetSubjectRequest {
    id: number;
}

export interface GetTermRequest {
    id: number;
}

export interface GetYearRequest {
    id: number;
}

export interface ListActivityRequest {
    limit?: number;
    offset?: number;
}

export interface ListAgencyRequest {
    limit?: number;
    offset?: number;
}

export interface ListContinentRequest {
    limit?: number;
    offset?: number;
}

export interface ListCountryRequest {
    limit?: number;
    offset?: number;
}

export interface ListCourseRequest {
    limit?: number;
    offset?: number;
}

export interface ListDegreeRequest {
    limit?: number;
    offset?: number;
}

export interface ListFacultyRequest {
    limit?: number;
    offset?: number;
}

export interface ListGenderRequest {
    limit?: number;
    offset?: number;
}

export interface ListInstitutionRequest {
    limit?: number;
    offset?: number;
}

export interface ListPlaceRequest {
    limit?: number;
    offset?: number;
}

export interface ListPrefixRequest {
    limit?: number;
    offset?: number;
}

export interface ListProfessorRequest {
    limit?: number;
    offset?: number;
}

export interface ListProfessorshipRequest {
    limit?: number;
    offset?: number;
}

export interface ListProvinceRequest {
    limit?: number;
    offset?: number;
}

export interface ListRegionRequest {
    limit?: number;
    offset?: number;
}

export interface ListResultsRequest {
    limit?: number;
    offset?: number;
}

export interface ListStudentRequest {
    limit?: number;
    offset?: number;
}

export interface ListSubjectRequest {
    limit?: number;
    offset?: number;
}

export interface ListTermRequest {
    limit?: number;
    offset?: number;
}

export interface ListYearRequest {
    limit?: number;
    offset?: number;
}

export interface UpdateResultsRequest {
    id: number;
    results: EntResults;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Create activity
     * Create activity
     */
    async createActivityRaw(requestParameters: CreateActivityRequest): Promise<runtime.ApiResponse<EntActivity>> {
        if (requestParameters.activity === null || requestParameters.activity === undefined) {
            throw new runtime.RequiredError('activity','Required parameter requestParameters.activity was null or undefined when calling createActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/activitys`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersActivityToJSON(requestParameters.activity),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntActivityFromJSON(jsonValue));
    }

    /**
     * Create activity
     * Create activity
     */
    async createActivity(requestParameters: CreateActivityRequest): Promise<EntActivity> {
        const response = await this.createActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create course
     * Create course
     */
    async createCourseRaw(requestParameters: CreateCourseRequest): Promise<runtime.ApiResponse<EntCourse>> {
        if (requestParameters.course === null || requestParameters.course === undefined) {
            throw new runtime.RequiredError('course','Required parameter requestParameters.course was null or undefined when calling createCourse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/courses`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersCourseToJSON(requestParameters.course),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCourseFromJSON(jsonValue));
    }

    /**
     * Create course
     * Create course
     */
    async createCourse(requestParameters: CreateCourseRequest): Promise<EntCourse> {
        const response = await this.createCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create professor
     * Create professor
     */
    async createProfessorRaw(requestParameters: CreateProfessorRequest): Promise<runtime.ApiResponse<EntProfessor>> {
        if (requestParameters.professor === null || requestParameters.professor === undefined) {
            throw new runtime.RequiredError('professor','Required parameter requestParameters.professor was null or undefined when calling createProfessor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/professors`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersProfessorToJSON(requestParameters.professor),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProfessorFromJSON(jsonValue));
    }

    /**
     * Create professor
     * Create professor
     */
    async createProfessor(requestParameters: CreateProfessorRequest): Promise<EntProfessor> {
        const response = await this.createProfessorRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create province
     * Create province
     */
    async createProvinceRaw(requestParameters: CreateProvinceRequest): Promise<runtime.ApiResponse<EntProvince>> {
        if (requestParameters.province === null || requestParameters.province === undefined) {
            throw new runtime.RequiredError('province','Required parameter requestParameters.province was null or undefined when calling createProvince.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/provinces`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersProvinceToJSON(requestParameters.province),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProvinceFromJSON(jsonValue));
    }

    /**
     * Create province
     * Create province
     */
    async createProvince(requestParameters: CreateProvinceRequest): Promise<EntProvince> {
        const response = await this.createProvinceRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create results
     * Create results
     */
    async createResultsRaw(requestParameters: CreateResultsRequest): Promise<runtime.ApiResponse<EntResults>> {
        if (requestParameters.results === null || requestParameters.results === undefined) {
            throw new runtime.RequiredError('results','Required parameter requestParameters.results was null or undefined when calling createResults.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/resultss`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersResultsToJSON(requestParameters.results),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntResultsFromJSON(jsonValue));
    }

    /**
     * Create results
     * Create results
     */
    async createResults(requestParameters: CreateResultsRequest): Promise<EntResults> {
        const response = await this.createResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Create student
     * Create student
     */
    async createStudentRaw(requestParameters: CreateStudentRequest): Promise<runtime.ApiResponse<EntStudent>> {
        if (requestParameters.student === null || requestParameters.student === undefined) {
            throw new runtime.RequiredError('student','Required parameter requestParameters.student was null or undefined when calling createStudent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/students`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ControllersStudentToJSON(requestParameters.student),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStudentFromJSON(jsonValue));
    }

    /**
     * Create student
     * Create student
     */
    async createStudent(requestParameters: CreateStudentRequest): Promise<EntStudent> {
        const response = await this.createStudentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get activity by ID
     * Delete a activity entity by ID
     */
    async deleteActivityRaw(requestParameters: DeleteActivityRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteActivity.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activitys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get activity by ID
     * Delete a activity entity by ID
     */
    async deleteActivity(requestParameters: DeleteActivityRequest): Promise<object> {
        const response = await this.deleteActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * get professor by ID
     * Delete a professor entity by ID
     */
    async deleteProfessorRaw(requestParameters: DeleteProfessorRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteProfessor.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/professors/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get professor by ID
     * Delete a professor entity by ID
     */
    async deleteProfessor(requestParameters: DeleteProfessorRequest): Promise<object> {
        const response = await this.deleteProfessorRaw(requestParameters);
        return await response.value();
    }

    /**
     * get results by ID
     * Delete a results entity by ID
     */
    async deleteResultsRaw(requestParameters: DeleteResultsRequest): Promise<runtime.ApiResponse<object>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deleteResults.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/resultss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * get results by ID
     * Delete a results entity by ID
     */
    async deleteResults(requestParameters: DeleteResultsRequest): Promise<object> {
        const response = await this.deleteResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get agency by ID
     * Get a agency entity by ID
     */
    async getAgencyRaw(requestParameters: GetAgencyRequest): Promise<runtime.ApiResponse<EntAgency>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getAgency.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/agencys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntAgencyFromJSON(jsonValue));
    }

    /**
     * get agency by ID
     * Get a agency entity by ID
     */
    async getAgency(requestParameters: GetAgencyRequest): Promise<EntAgency> {
        const response = await this.getAgencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get continent by ID
     * Get a continent entity by ID
     */
    async getContinentRaw(requestParameters: GetContinentRequest): Promise<runtime.ApiResponse<EntContinent>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getContinent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/continents/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntContinentFromJSON(jsonValue));
    }

    /**
     * get continent by ID
     * Get a continent entity by ID
     */
    async getContinent(requestParameters: GetContinentRequest): Promise<EntContinent> {
        const response = await this.getContinentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get country by ID
     * Get a country entity by ID
     */
    async getCountryRaw(requestParameters: GetCountryRequest): Promise<runtime.ApiResponse<EntCountry>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCountry.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/countrys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCountryFromJSON(jsonValue));
    }

    /**
     * get country by ID
     * Get a country entity by ID
     */
    async getCountry(requestParameters: GetCountryRequest): Promise<EntCountry> {
        const response = await this.getCountryRaw(requestParameters);
        return await response.value();
    }

    /**
     * get course by ID
     * Get a course entity by ID
     */
    async getCourseRaw(requestParameters: GetCourseRequest): Promise<runtime.ApiResponse<EntCourse>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getCourse.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/courses/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntCourseFromJSON(jsonValue));
    }

    /**
     * get course by ID
     * Get a course entity by ID
     */
    async getCourse(requestParameters: GetCourseRequest): Promise<EntCourse> {
        const response = await this.getCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * get degree by ID
     * Get a degree entity by ID
     */
    async getDegreeRaw(requestParameters: GetDegreeRequest): Promise<runtime.ApiResponse<EntDegree>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getDegree.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/degrees/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntDegreeFromJSON(jsonValue));
    }

    /**
     * get degree by ID
     * Get a degree entity by ID
     */
    async getDegree(requestParameters: GetDegreeRequest): Promise<EntDegree> {
        const response = await this.getDegreeRaw(requestParameters);
        return await response.value();
    }

    /**
     * get faculty by ID
     * Get a faculty entity by ID
     */
    async getFacultyRaw(requestParameters: GetFacultyRequest): Promise<runtime.ApiResponse<EntFaculty>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getFaculty.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facultys/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntFacultyFromJSON(jsonValue));
    }

    /**
     * get faculty by ID
     * Get a faculty entity by ID
     */
    async getFaculty(requestParameters: GetFacultyRequest): Promise<EntFaculty> {
        const response = await this.getFacultyRaw(requestParameters);
        return await response.value();
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGenderRaw(requestParameters: GetGenderRequest): Promise<runtime.ApiResponse<EntGender>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getGender.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntGenderFromJSON(jsonValue));
    }

    /**
     * get gender by ID
     * Get a gender entity by ID
     */
    async getGender(requestParameters: GetGenderRequest): Promise<EntGender> {
        const response = await this.getGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * get institution by ID
     * Get a institution entity by ID
     */
    async getInstitutionRaw(requestParameters: GetInstitutionRequest): Promise<runtime.ApiResponse<EntInstitution>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getInstitution.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/institutions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntInstitutionFromJSON(jsonValue));
    }

    /**
     * get institution by ID
     * Get a institution entity by ID
     */
    async getInstitution(requestParameters: GetInstitutionRequest): Promise<EntInstitution> {
        const response = await this.getInstitutionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get place by ID
     * Get a place entity by ID
     */
    async getPlaceRaw(requestParameters: GetPlaceRequest): Promise<runtime.ApiResponse<EntPlace>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPlace.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/places/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPlaceFromJSON(jsonValue));
    }

    /**
     * get place by ID
     * Get a place entity by ID
     */
    async getPlace(requestParameters: GetPlaceRequest): Promise<EntPlace> {
        const response = await this.getPlaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * get prefix by ID
     * Get a prefix entity by ID
     */
    async getPrefixRaw(requestParameters: GetPrefixRequest): Promise<runtime.ApiResponse<EntPrefix>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPrefix.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prefixs/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntPrefixFromJSON(jsonValue));
    }

    /**
     * get prefix by ID
     * Get a prefix entity by ID
     */
    async getPrefix(requestParameters: GetPrefixRequest): Promise<EntPrefix> {
        const response = await this.getPrefixRaw(requestParameters);
        return await response.value();
    }

    /**
     * get professorship by ID
     * Get a professorship entity by ID
     */
    async getProfessorshipRaw(requestParameters: GetProfessorshipRequest): Promise<runtime.ApiResponse<EntProfessorship>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProfessorship.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/professorships/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntProfessorshipFromJSON(jsonValue));
    }

    /**
     * get professorship by ID
     * Get a professorship entity by ID
     */
    async getProfessorship(requestParameters: GetProfessorshipRequest): Promise<EntProfessorship> {
        const response = await this.getProfessorshipRaw(requestParameters);
        return await response.value();
    }

    /**
     * get region by ID
     * Get a region entity by ID
     */
    async getRegionRaw(requestParameters: GetRegionRequest): Promise<runtime.ApiResponse<EntRegion>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getRegion.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/regions/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntRegionFromJSON(jsonValue));
    }

    /**
     * get region by ID
     * Get a region entity by ID
     */
    async getRegion(requestParameters: GetRegionRequest): Promise<EntRegion> {
        const response = await this.getRegionRaw(requestParameters);
        return await response.value();
    }

    /**
     * get results by ID
     * Get a results entity by ID
     */
    async getResultsRaw(requestParameters: GetResultsRequest): Promise<runtime.ApiResponse<EntResults>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getResults.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/resultss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntResultsFromJSON(jsonValue));
    }

    /**
     * get results by ID
     * Get a results entity by ID
     */
    async getResults(requestParameters: GetResultsRequest): Promise<EntResults> {
        const response = await this.getResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * get student by ID
     * Get a student entity by ID
     */
    async getStudentRaw(requestParameters: GetStudentRequest): Promise<runtime.ApiResponse<EntStudent>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getStudent.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/students/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntStudentFromJSON(jsonValue));
    }

    /**
     * get student by ID
     * Get a student entity by ID
     */
    async getStudent(requestParameters: GetStudentRequest): Promise<EntStudent> {
        const response = await this.getStudentRaw(requestParameters);
        return await response.value();
    }

    /**
     * get subject by ID
     * Get a subject entity by ID
     */
    async getSubjectRaw(requestParameters: GetSubjectRequest): Promise<runtime.ApiResponse<EntSubject>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getSubject.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subjects/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntSubjectFromJSON(jsonValue));
    }

    /**
     * get subject by ID
     * Get a subject entity by ID
     */
    async getSubject(requestParameters: GetSubjectRequest): Promise<EntSubject> {
        const response = await this.getSubjectRaw(requestParameters);
        return await response.value();
    }

    /**
     * get term by ID
     * Get a term entity by ID
     */
    async getTermRaw(requestParameters: GetTermRequest): Promise<runtime.ApiResponse<EntTerm>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getTerm.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/terms/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntTermFromJSON(jsonValue));
    }

    /**
     * get term by ID
     * Get a term entity by ID
     */
    async getTerm(requestParameters: GetTermRequest): Promise<EntTerm> {
        const response = await this.getTermRaw(requestParameters);
        return await response.value();
    }

    /**
     * get year by ID
     * Get a year entity by ID
     */
    async getYearRaw(requestParameters: GetYearRequest): Promise<runtime.ApiResponse<EntYear>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getYear.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/years/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntYearFromJSON(jsonValue));
    }

    /**
     * get year by ID
     * Get a year entity by ID
     */
    async getYear(requestParameters: GetYearRequest): Promise<EntYear> {
        const response = await this.getYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * list activity entities
     * List activity entities
     */
    async listActivityRaw(requestParameters: ListActivityRequest): Promise<runtime.ApiResponse<Array<EntActivity>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/activitys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntActivityFromJSON));
    }

    /**
     * list activity entities
     * List activity entities
     */
    async listActivity(requestParameters: ListActivityRequest): Promise<Array<EntActivity>> {
        const response = await this.listActivityRaw(requestParameters);
        return await response.value();
    }

    /**
     * list agency entities
     * List agency entities
     */
    async listAgencyRaw(requestParameters: ListAgencyRequest): Promise<runtime.ApiResponse<Array<EntAgency>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/agencys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntAgencyFromJSON));
    }

    /**
     * list agency entities
     * List agency entities
     */
    async listAgency(requestParameters: ListAgencyRequest): Promise<Array<EntAgency>> {
        const response = await this.listAgencyRaw(requestParameters);
        return await response.value();
    }

    /**
     * list continent entities
     * List continent entities
     */
    async listContinentRaw(requestParameters: ListContinentRequest): Promise<runtime.ApiResponse<Array<EntContinent>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/continents`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntContinentFromJSON));
    }

    /**
     * list continent entities
     * List continent entities
     */
    async listContinent(requestParameters: ListContinentRequest): Promise<Array<EntContinent>> {
        const response = await this.listContinentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list country entities
     * List country entities
     */
    async listCountryRaw(requestParameters: ListCountryRequest): Promise<runtime.ApiResponse<Array<EntCountry>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/countrys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCountryFromJSON));
    }

    /**
     * list country entities
     * List country entities
     */
    async listCountry(requestParameters: ListCountryRequest): Promise<Array<EntCountry>> {
        const response = await this.listCountryRaw(requestParameters);
        return await response.value();
    }

    /**
     * list course entities
     * List course entities
     */
    async listCourseRaw(requestParameters: ListCourseRequest): Promise<runtime.ApiResponse<Array<EntCourse>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/courses`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntCourseFromJSON));
    }

    /**
     * list course entities
     * List course entities
     */
    async listCourse(requestParameters: ListCourseRequest): Promise<Array<EntCourse>> {
        const response = await this.listCourseRaw(requestParameters);
        return await response.value();
    }

    /**
     * list degree entities
     * List degree entities
     */
    async listDegreeRaw(requestParameters: ListDegreeRequest): Promise<runtime.ApiResponse<Array<EntDegree>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/degrees`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntDegreeFromJSON));
    }

    /**
     * list degree entities
     * List degree entities
     */
    async listDegree(requestParameters: ListDegreeRequest): Promise<Array<EntDegree>> {
        const response = await this.listDegreeRaw(requestParameters);
        return await response.value();
    }

    /**
     * list faculty entities
     * List faculty entities
     */
    async listFacultyRaw(requestParameters: ListFacultyRequest): Promise<runtime.ApiResponse<Array<EntFaculty>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/facultys`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntFacultyFromJSON));
    }

    /**
     * list faculty entities
     * List faculty entities
     */
    async listFaculty(requestParameters: ListFacultyRequest): Promise<Array<EntFaculty>> {
        const response = await this.listFacultyRaw(requestParameters);
        return await response.value();
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGenderRaw(requestParameters: ListGenderRequest): Promise<runtime.ApiResponse<Array<EntGender>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/genders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntGenderFromJSON));
    }

    /**
     * list gender entities
     * List gender entities
     */
    async listGender(requestParameters: ListGenderRequest): Promise<Array<EntGender>> {
        const response = await this.listGenderRaw(requestParameters);
        return await response.value();
    }

    /**
     * list institutionentities
     * List institution entities
     */
    async listInstitutionRaw(requestParameters: ListInstitutionRequest): Promise<runtime.ApiResponse<Array<EntInstitution>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/institutions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntInstitutionFromJSON));
    }

    /**
     * list institutionentities
     * List institution entities
     */
    async listInstitution(requestParameters: ListInstitutionRequest): Promise<Array<EntInstitution>> {
        const response = await this.listInstitutionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list place entities
     * List place entities
     */
    async listPlaceRaw(requestParameters: ListPlaceRequest): Promise<runtime.ApiResponse<Array<EntPlace>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/places`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPlaceFromJSON));
    }

    /**
     * list place entities
     * List place entities
     */
    async listPlace(requestParameters: ListPlaceRequest): Promise<Array<EntPlace>> {
        const response = await this.listPlaceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list prefix entities
     * List prefix entities
     */
    async listPrefixRaw(requestParameters: ListPrefixRequest): Promise<runtime.ApiResponse<Array<EntPrefix>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/prefixs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntPrefixFromJSON));
    }

    /**
     * list prefix entities
     * List prefix entities
     */
    async listPrefix(requestParameters: ListPrefixRequest): Promise<Array<EntPrefix>> {
        const response = await this.listPrefixRaw(requestParameters);
        return await response.value();
    }

    /**
     * list professor entities
     * List professor entities
     */
    async listProfessorRaw(requestParameters: ListProfessorRequest): Promise<runtime.ApiResponse<Array<EntProfessor>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/professors`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProfessorFromJSON));
    }

    /**
     * list professor entities
     * List professor entities
     */
    async listProfessor(requestParameters: ListProfessorRequest): Promise<Array<EntProfessor>> {
        const response = await this.listProfessorRaw(requestParameters);
        return await response.value();
    }

    /**
     * list professorship entities
     * List professorship entities
     */
    async listProfessorshipRaw(requestParameters: ListProfessorshipRequest): Promise<runtime.ApiResponse<Array<EntProfessorship>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/professorships`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProfessorshipFromJSON));
    }

    /**
     * list professorship entities
     * List professorship entities
     */
    async listProfessorship(requestParameters: ListProfessorshipRequest): Promise<Array<EntProfessorship>> {
        const response = await this.listProfessorshipRaw(requestParameters);
        return await response.value();
    }

    /**
     * list province entities
     * List province entities
     */
    async listProvinceRaw(requestParameters: ListProvinceRequest): Promise<runtime.ApiResponse<Array<EntProvince>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/provinces`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntProvinceFromJSON));
    }

    /**
     * list province entities
     * List province entities
     */
    async listProvince(requestParameters: ListProvinceRequest): Promise<Array<EntProvince>> {
        const response = await this.listProvinceRaw(requestParameters);
        return await response.value();
    }

    /**
     * list region entities
     * List region entities
     */
    async listRegionRaw(requestParameters: ListRegionRequest): Promise<runtime.ApiResponse<Array<EntRegion>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/regions`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntRegionFromJSON));
    }

    /**
     * list region entities
     * List region entities
     */
    async listRegion(requestParameters: ListRegionRequest): Promise<Array<EntRegion>> {
        const response = await this.listRegionRaw(requestParameters);
        return await response.value();
    }

    /**
     * list results entities
     * List results entities
     */
    async listResultsRaw(requestParameters: ListResultsRequest): Promise<runtime.ApiResponse<Array<EntResults>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/resultss`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntResultsFromJSON));
    }

    /**
     * list results entities
     * List results entities
     */
    async listResults(requestParameters: ListResultsRequest): Promise<Array<EntResults>> {
        const response = await this.listResultsRaw(requestParameters);
        return await response.value();
    }

    /**
     * list student entities
     * List student entities
     */
    async listStudentRaw(requestParameters: ListStudentRequest): Promise<runtime.ApiResponse<Array<EntStudent>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/students`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntStudentFromJSON));
    }

    /**
     * list student entities
     * List student entities
     */
    async listStudent(requestParameters: ListStudentRequest): Promise<Array<EntStudent>> {
        const response = await this.listStudentRaw(requestParameters);
        return await response.value();
    }

    /**
     * list subject entities
     * List subject entities
     */
    async listSubjectRaw(requestParameters: ListSubjectRequest): Promise<runtime.ApiResponse<Array<EntSubject>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/subjects`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntSubjectFromJSON));
    }

    /**
     * list subject entities
     * List subject entities
     */
    async listSubject(requestParameters: ListSubjectRequest): Promise<Array<EntSubject>> {
        const response = await this.listSubjectRaw(requestParameters);
        return await response.value();
    }

    /**
     * list term entities
     * List term entities
     */
    async listTermRaw(requestParameters: ListTermRequest): Promise<runtime.ApiResponse<Array<EntTerm>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/terms`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntTermFromJSON));
    }

    /**
     * list term entities
     * List term entities
     */
    async listTerm(requestParameters: ListTermRequest): Promise<Array<EntTerm>> {
        const response = await this.listTermRaw(requestParameters);
        return await response.value();
    }

    /**
     * list year entities
     * List year entities
     */
    async listYearRaw(requestParameters: ListYearRequest): Promise<runtime.ApiResponse<Array<EntYear>>> {
        const queryParameters: runtime.HTTPQuery = {};

        if (requestParameters.limit !== undefined) {
            queryParameters['limit'] = requestParameters.limit;
        }

        if (requestParameters.offset !== undefined) {
            queryParameters['offset'] = requestParameters.offset;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/years`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EntYearFromJSON));
    }

    /**
     * list year entities
     * List year entities
     */
    async listYear(requestParameters: ListYearRequest): Promise<Array<EntYear>> {
        const response = await this.listYearRaw(requestParameters);
        return await response.value();
    }

    /**
     * update results by ID
     * Update a results entity by ID
     */
    async updateResultsRaw(requestParameters: UpdateResultsRequest): Promise<runtime.ApiResponse<EntResults>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updateResults.');
        }

        if (requestParameters.results === null || requestParameters.results === undefined) {
            throw new runtime.RequiredError('results','Required parameter requestParameters.results was null or undefined when calling updateResults.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/resultss/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EntResultsToJSON(requestParameters.results),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EntResultsFromJSON(jsonValue));
    }

    /**
     * update results by ID
     * Update a results entity by ID
     */
    async updateResults(requestParameters: UpdateResultsRequest): Promise<EntResults> {
        const response = await this.updateResultsRaw(requestParameters);
        return await response.value();
    }

}
